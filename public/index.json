[{"content":"What You’ll Need A server or virtual machine (minimum: 1 GB RAM and 1 CPU). Docker installed on your server. A static IP or domain name for accessing the password manager. Step 1: Decide Between Bitwarden and Vaultwarden Bitwarden Official version with robust features and frequent updates. Requires more resources and supports paid features like OTP generation. Vaultwarden (formerly Bitwarden_rs) Lightweight, community-built alternative to Bitwarden. Perfect for homelabs or low-resource servers. Compatible with most Bitwarden clients. For most homelab users, Vaultwarden is recommended due to its lightweight nature.\nStep 2: Install Docker (If Not Installed) Update your system:\nsudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y Install Docker:\nsudo apt install -y docker.io Enable Docker to start on boot:\nsudo systemctl enable docker Step 3: Deploy Vaultwarden Create a directory for Vaultwarden:\nmkdir -p ~/vaultwarden Run the Vaultwarden container:\ndocker run -d --name vaultwarden -p 8080:80 \\ -v ~/vaultwarden:/data \\ vaultwarden/server:latest Access Vaultwarden:\nOpen your browser and navigate to http://\u0026lt;server_ip\u0026gt;:8080. Create an admin account to start managing your passwords. Step 4: Configure HTTPS for Security Option 1: Use a Reverse Proxy (Recommended) Install Nginx:\nsudo apt install -y nginx Create an Nginx configuration file:\nsudo nano /etc/nginx/sites-available/vaultwarden Add the following configuration:\nserver { listen 80; server_name yourdomain.com; location / { proxy_pass http://127.0.0.1:8080; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; } } Replace yourdomain.com with your actual domain name. Enable the site and restart Nginx:\nsudo ln -s /etc/nginx/sites-available/vaultwarden /etc/nginx/sites-enabled/ sudo systemctl restart nginx Install Certbot for HTTPS:\nsudo apt install -y certbot python3-certbot-nginx Obtain an SSL certificate:\nsudo certbot --nginx -d yourdomain.com Option 2: Use Vaultwarden\u0026rsquo;s Built-in HTTPS (Optional) Generate an SSL certificate (e.g., with Let\u0026rsquo;s Encrypt or a self-signed cert). Place the certificate and key in the Vaultwarden data directory. Restart the Vaultwarden container with HTTPS ports mapped. Step 5: Access and Use Vaultwarden Install Bitwarden Clients:\nDownload the Bitwarden app for your desktop or mobile devices. Use the web browser extension for autofill capabilities. Log in using your server URL:\nSet the server URL to https://yourdomain.com during client setup. Start securely storing and managing your passwords.\nFAQs Q: Why use Vaultwarden instead of the official Bitwarden?\nA: Vaultwarden is lightweight and ideal for self-hosting, especially on resource-constrained devices.\nQ: Can I use 2FA with Vaultwarden?\nA: Yes, Vaultwarden supports two-factor authentication (TOTP, Yubikey, etc.).\nQ: How do I back up my Vaultwarden data?\nA: Back up the ~/vaultwarden directory regularly. For example:\nbash tar -czvf vaultwarden-backup.tar.gz ~/vaultwarden Q: Can I enable user registration for others?\nA: Yes, enable it in the Vaultwarden admin panel under the \u0026ldquo;User Management\u0026rdquo; section.\nQ: What happens if my Vaultwarden server goes offline?\nA: You can still access locally cached passwords on your devices, but synchronization will stop until the server is back online.\nQ: How do I update Vaultwarden?\nA: Pull the latest Docker image and restart the container:\nbash docker pull vaultwarden/server:latest docker stop vaultwarden docker rm vaultwarden docker run -d --name vaultwarden -p 8080:80 \\ -v ~/vaultwarden:/data \\ vaultwarden/server:latest Q: Is Vaultwarden secure?\nA: Yes, Vaultwarden is designed with security in mind. Ensure you enable HTTPS, use strong admin credentials, and keep the software updated.\nBy setting up Vaultwarden, you can take control of your password management in a secure, private, and cost-effective way. Happy homelabbing!\n","permalink":"https://utechjapan.net/post/setting-up-a-self-hosted-password-manager-with-bitwarden-or-vaultwarden/","summary":"\u003ch2 id=\"what-youll-need\"\u003eWhat You’ll Need\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eA server or virtual machine (minimum: 1 GB RAM and 1 CPU).\u003c/li\u003e\n\u003cli\u003eDocker installed on your server.\u003c/li\u003e\n\u003cli\u003eA static IP or domain name for accessing the password manager.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"step-1-decide-between-bitwarden-and-vaultwarden\"\u003eStep 1: Decide Between Bitwarden and Vaultwarden\u003c/h2\u003e\n\u003ch3 id=\"bitwarden\"\u003e\u003cstrong\u003eBitwarden\u003c/strong\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eOfficial version with robust features and frequent updates.\u003c/li\u003e\n\u003cli\u003eRequires more resources and supports paid features like OTP generation.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"vaultwarden-formerly-bitwarden_rs\"\u003e\u003cstrong\u003eVaultwarden (formerly Bitwarden_rs)\u003c/strong\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eLightweight, community-built alternative to Bitwarden.\u003c/li\u003e\n\u003cli\u003ePerfect for homelabs or low-resource servers.\u003c/li\u003e\n\u003cli\u003eCompatible with most Bitwarden clients.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor most homelab users, \u003cstrong\u003eVaultwarden\u003c/strong\u003e is recommended due to its lightweight nature.\u003c/p\u003e","title":"Setting Up a Self-Hosted Password Manager with Bitwarden or Vaultwarden"},{"content":"What You’ll Need A server or virtual machine to host the WireGuard VPN. Basic knowledge of networking and port forwarding. A static public IP or dynamic DNS for remote access. Step 1: Install WireGuard Update and install WireGuard:\nsudo apt update \u0026amp;\u0026amp; sudo apt install -y wireguard Verify the installation:\nwg --version Step 2: Generate Keys Generate the server’s private and public keys:\nwg genkey | tee server_private.key | wg pubkey \u0026gt; server_public.key Save the keys securely:\nThe private key will be in server_private.key, and the public key will be in server_public.key.\nStep 3: Configure the WireGuard Server Create a configuration file:\nsudo nano /etc/wireguard/wg0.conf Add the following configuration:\n[Interface] Address = 10.0.0.1/24 PrivateKey = \u0026lt;server_private_key\u0026gt; ListenPort = 51820 [Peer] PublicKey = \u0026lt;client_public_key\u0026gt; AllowedIPs = 10.0.0.2/32 Replace \u0026lt;server_private_key\u0026gt; and \u0026lt;client_public_key\u0026gt; with the respective values.\nSet the appropriate file permissions:\nsudo chmod 600 /etc/wireguard/wg0.conf Start the WireGuard interface:\nsudo wg-quick up wg0 Enable WireGuard to start on boot:\nsudo systemctl enable wg-quick@wg0 Step 4: Set Up Port Forwarding on Your Router Access your router’s admin interface (usually at 192.168.1.1 or 192.168.0.1). Navigate to the port forwarding section. Forward port 51820 (UDP) to your WireGuard server’s internal IP address. Step 5: Configure the Client Install WireGuard on the client device:\nFor Linux: sudo apt install -y wireguard For Windows, macOS, or mobile devices, download WireGuard from the official site. Generate the client’s private and public keys:\nwg genkey | tee client_private.key | wg pubkey \u0026gt; client_public.key Create the client configuration file:\nnano client.conf Add the following configuration:\n[Interface] Address = 10.0.0.2/24 PrivateKey = \u0026lt;client_private_key\u0026gt; [Peer] PublicKey = \u0026lt;server_public_key\u0026gt; Endpoint = \u0026lt;your_public_ip\u0026gt;:51820 AllowedIPs = 0.0.0.0/0, ::/0 PersistentKeepalive = 21 Replace \u0026lt;client_private_key\u0026gt;, \u0026lt;server_public_key\u0026gt;, and \u0026lt;your_public_ip\u0026gt; with the respective values.\nImport the configuration on the client:\nFor Linux: sudo wg-quick up ./client.conf For mobile apps, scan the QR code generated from the configuration. Step 6: Test the Connection Ping the server from the client:\nping 10.0.0.1 If successful, try accessing resources in your homelab via the VPN.\nFAQs Q: What is WireGuard’s default encryption?\nA: WireGuard uses modern cryptographic primitives like ChaCha20, Poly1305, and Curve25519 for secure, lightweight encryption.\nQ: Can I use WireGuard with dynamic IP addresses?\nA: Yes, use a dynamic DNS service (e.g., DuckDNS) to resolve your public IP.\nQ: How many clients can connect to the server?\nA: WireGuard supports multiple clients. Add a new [Peer] section for each client in the server configuration.\nQ: Is WireGuard faster than OpenVPN?\nA: Yes, WireGuard is generally faster due to its minimal codebase and efficient encryption.\nQ: How do I stop the VPN?\nA: Use the following command:\nbash sudo wg-quick down wg0 Q: Can I use WireGuard on a Raspberry Pi?\nA: Yes, WireGuard works efficiently on Raspberry Pi, making it a great choice for homelab setups.\nQ: How do I troubleshoot connection issues?\nA: Check:\nFirewall rules on the server. Port forwarding on the router. Correct keys in configuration files. By setting up a WireGuard VPN, you can securely access your homelab from anywhere. Enjoy the freedom of remote access!\n","permalink":"https://utechjapan.net/post/setting-up-a-wireguard-vpn-to-access-your-homelab-remotely/","summary":"\u003ch2 id=\"what-youll-need\"\u003eWhat You’ll Need\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eA server or virtual machine to host the WireGuard VPN.\u003c/li\u003e\n\u003cli\u003eBasic knowledge of networking and port forwarding.\u003c/li\u003e\n\u003cli\u003eA static public IP or dynamic DNS for remote access.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"step-1-install-wireguard\"\u003eStep 1: Install WireGuard\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eUpdate and install WireGuard\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo apt update \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e sudo apt install -y wireguard\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eVerify the installation\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewg --version\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"step-2-generate-keys\"\u003eStep 2: Generate Keys\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eGenerate the server’s private and public keys\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewg genkey | tee server_private.key | wg pubkey \u0026gt; server_public.key\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eSave the keys securely\u003c/strong\u003e:\u003cbr\u003e\nThe private key will be in \u003ccode\u003eserver_private.key\u003c/code\u003e, and the public key will be in \u003ccode\u003eserver_public.key\u003c/code\u003e.\u003c/p\u003e","title":"Setting Up a WireGuard VPN to Access Your HomeLab Remotely"},{"content":"What You’ll Need A server or device to act as the backup source. BorgBackup installed on the source. Rclone for cloud storage synchronization. A cloud storage account (e.g., Google Drive, AWS S3, Backblaze). Step 1: Install BorgBackup Update and install BorgBackup:\nsudo apt update \u0026amp;\u0026amp; sudo apt install -y borgbackup Verify the installation:\nborg --version Step 2: Initialize a Borg Repository Create a directory for backups:\nmkdir -p ~/backups/borg Initialize the Borg repository:\nborg init --encryption=repokey ~/backups/borg Replace ~/backups/borg with the desired repository path. Enter a secure passphrase when prompted. Step 3: Create a Backup Script Create a script for automated backups:\nnano ~/backup.sh Add the following script content:\n#!/bin/bash TIMESTAMP=$(date +\u0026#34;%Y-%m-%d_%H-%M-%S\u0026#34;) REPO=~/backups/borg borg create --progress --stats $REPO::$TIMESTAMP ~/important-data borg prune --keep-daily=7 --keep-weekly=4 --keep-monthly=6 $REPO Replace ~/important-data with the path to the data you want to back up. Adjust the prune options to fit your retention policy. Make the script executable:\nchmod +x ~/backup.sh Test the script:\n~/backup.sh Step 4: Install and Configure Rclone Install Rclone:\nsudo apt install -y rclone Configure a cloud storage remote:\nrclone config Follow the prompts to set up your cloud storage provider. Name the remote (e.g., myremote) for easy reference. Test the remote configuration:\nrclone ls myremote: Step 5: Automate Cloud Sync with Rclone Modify the backup script to include Rclone:\nnano ~/backup.sh Add the following line to sync Borg backups to the cloud:\nrclone sync ~/backups/borg myremote:backups/borg --progress Replace myremote:backups/borg with your desired cloud storage path. Save and close the script.\nStep 6: Schedule the Backup Script Open the crontab editor:\ncrontab -e Add the following line to schedule the backup script:\n0 2 * * * ~/backup.sh This will run the backup script daily at 2:00 AM. Adjust the schedule as needed. Step 7: Verify Backups List Borg backups:\nborg list ~/backups/borg Check cloud storage files:\nrclone ls myremote:backups/borg FAQs Q: Why use Borg and Rclone together?\nA: Borg excels at local deduplication and encryption, while Rclone allows seamless synchronization to cloud storage, combining the best of both worlds.\nQ: How do I restore data with Borg?\nA: Use the following command:\nbash\rborg extract ~/backups/borg::backup_name\rQ: Can I encrypt backups in the cloud?\nA: Yes, Borg encrypts data before storing it locally. Rclone will upload the encrypted data to the cloud.\nQ: How do I check for failed backups?\nA: Check the output logs of your script or configure email notifications for cron jobs.\nQ: Can I use Rclone without Borg?\nA: Yes, Rclone can independently handle backups, but it lacks Borg’s deduplication and encryption features.\nQ: How much cloud storage do I need?\nA: This depends on the size of your Borg repository and retention policy. Monitor usage with rclone size.\nQ: Is it possible to run backups incrementally?\nA: Yes, Borg automatically deduplicates and stores only changed data.\nBy combining Borg and Rclone, you can automate and secure your backups both locally and in the cloud, ensuring your homelab data is always protected. Happy backing up!\n","permalink":"https://utechjapan.net/post/automating-backups-in-your-homelab-with-borg-and-rclone/","summary":"\u003ch2 id=\"what-youll-need\"\u003eWhat You’ll Need\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eA server or device to act as the backup source.\u003c/li\u003e\n\u003cli\u003eBorgBackup installed on the source.\u003c/li\u003e\n\u003cli\u003eRclone for cloud storage synchronization.\u003c/li\u003e\n\u003cli\u003eA cloud storage account (e.g., Google Drive, AWS S3, Backblaze).\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"step-1-install-borgbackup\"\u003eStep 1: Install BorgBackup\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eUpdate and install BorgBackup\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo apt update \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e sudo apt install -y borgbackup\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eVerify the installation\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eborg --version\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"step-2-initialize-a-borg-repository\"\u003eStep 2: Initialize a Borg Repository\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCreate a directory for backups\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emkdir -p ~/backups/borg\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eInitialize the Borg repository\u003c/strong\u003e:\u003c/p\u003e","title":"Automating Backups in Your HomeLab with Borg and Rclone"},{"content":"What You’ll Need At least two servers or virtual machines (referred to as primary and backup nodes). A Linux-based OS installed on both (Ubuntu 20.04 or newer is recommended). A shared virtual IP address (VIP) for failover. Step 1: Install Keepalived Log into both nodes and update the system:\nsudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y Install Keepalived on both nodes:\nsudo apt install -y keepalived Verify the installation:\nkeepalived --version Step 2: Configure Keepalived on the Primary Node Edit the Keepalived configuration file:\nsudo nano /etc/keepalived/keepalived.conf Add the following configuration:\nvrrp_instance VI_1 { state MASTER interface eth0 virtual_router_id 51 priority 100 advert_int 1 authentication { auth_type PASS auth_pass securepassword } virtual_ipaddress { 192.168.1.100 } } Replace eth0 with your network interface name (use ip a to find it). Replace 192.168.1.100 with your desired virtual IP (VIP). Use a secure password for auth_pass. Restart Keepalived:\nsudo systemctl restart keepalived Enable Keepalived to start on boot:\nsudo systemctl enable keepalived Step 3: Configure Keepalived on the Backup Node Edit the Keepalived configuration file:\nsudo nano /etc/keepalived/keepalived.conf Add the following configuration:\nvrrp_instance VI_1 { state BACKUP interface eth0 virtual_router_id 51 priority 90 advert_int 1 authentication { auth_type PASS auth_pass securepassword } virtual_ipaddress { 192.168.1.100 } } Ensure the state is set to BACKUP and priority is lower than the primary node.\nRestart Keepalived:\nsudo systemctl restart keepalived Enable Keepalived to start on boot:\nsudo systemctl enable keepalived Step 4: Test the High-Availability Setup Check the VIP on the primary node:\nip a | grep 192.168.1.100 The VIP should be bound to the primary node’s interface.\nSimulate a failover:\nStop Keepalived on the primary node: sudo systemctl stop keepalived Check the VIP on the backup node: ip a | grep 192.168.1.100 The VIP should now be assigned to the backup node.\nRestart Keepalived on the primary node:\nsudo systemctl start keepalived Step 5: Monitor and Maintain Check Keepalived logs for troubleshooting:\nsudo journalctl -u keepalived Verify that Keepalived is running:\nsudo systemctl status keepalived Update Keepalived and system packages regularly:\nsudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y FAQs Q: Can I use Keepalived with multiple backup nodes?\nA: Yes, Keepalived supports multiple backup nodes by assigning unique priorities to each one.\nQ: Does Keepalived work with IPv6?\nA: Yes, Keepalived supports both IPv4 and IPv6 addresses.\nQ: How do I troubleshoot failover issues?\nA: Check the following:\nLogs in /var/log/syslog or journalctl. Network configuration (correct interfaces and VIP settings). Ensure the authentication auth_pass is identical on all nodes. Q: Can I use Keepalived for load balancing?\nA: Yes, Keepalived supports Layer 4 load balancing through the LVS (Linux Virtual Server) feature.\nQ: How do I ensure the VIP is reachable across subnets?\nA: Enable proxy ARP or configure static routes for the VIP.\nQ: Can Keepalived monitor service health?\nA: Yes, Keepalived can monitor services with health-check scripts and perform failover based on service availability.\nBy setting up Keepalived, you can create a highly available environment for critical services in your homelab. This ensures minimal downtime and a reliable infrastructure. Happy experimenting!\n","permalink":"https://utechjapan.net/post/building-a-high-availability-setup-for-your-homelab-using-keepalived/","summary":"\u003ch2 id=\"what-youll-need\"\u003eWhat You’ll Need\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eAt least two servers or virtual machines (referred to as primary and backup nodes).\u003c/li\u003e\n\u003cli\u003eA Linux-based OS installed on both (Ubuntu 20.04 or newer is recommended).\u003c/li\u003e\n\u003cli\u003eA shared virtual IP address (VIP) for failover.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"step-1-install-keepalived\"\u003eStep 1: Install Keepalived\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eLog into both nodes and update the system\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo apt update \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e sudo apt upgrade -y\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eInstall Keepalived on both nodes\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo apt install -y keepalived\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eVerify the installation\u003c/strong\u003e:\u003c/p\u003e","title":"Building a High-Availability Setup for Your HomeLab Using Keepalived"},{"content":"What You’ll Need At least two nodes (one master, one worker) with Linux installed (e.g., Ubuntu 20.04 or newer). 2 GB RAM and 2 CPUs per node (minimum recommended). Basic networking knowledge. Step 1: Prepare the Nodes Update each node:\nsudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y Install required dependencies:\nsudo apt install -y curl apt-transport-https Set unique hostnames for each node:\nOn the master node:\nsudo hostnamectl set-hostname master-node On the worker node(s):\nsudo hostnamectl set-hostname worker-node-1 Disable swap on all nodes:\nsudo swapoff -a To make it permanent, comment out the swap line in /etc/fstab.\nStep 2: Install K3s on the Master Node Download and install K3s:\ncurl -sfL https://get.k3s.io | sh - Verify the installation:\nkubectl get nodes You should see the master node listed as Ready.\nRetrieve the K3s join token:\nsudo cat /var/lib/rancher/k3s/server/node-token Save the token, as you’ll need it to connect the worker nodes.\nStep 3: Install K3s on Worker Nodes Download and install K3s:\nReplace \u0026lt;master_ip\u0026gt; with the IP address of the master node.\ncurl -sfL https://get.k3s.io | K3S_URL=https://\u0026lt;master_ip\u0026gt;:6443 K3S_TOKEN=\u0026lt;node-token\u0026gt; sh - Verify the worker node is connected:\nOn the master node:\nkubectl get nodes The worker node(s) should now appear in the list.\nStep 4: Deploy a Test Application Create a deployment YAML file:\nnano nginx-deployment.yaml Add the following configuration:\napiVersion: apps/v1 kind: Deployment metadata: name: nginx-deployment spec: replicas: 2 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:latest ports: - containerPort: 80 Apply the deployment:\nkubectl apply -f nginx-deployment.yaml Verify the deployment:\nkubectl get pods You should see two running pods for the Nginx application.\nStep 5: Expose the Application Create a service to expose Nginx:\nkubectl expose deployment nginx-deployment --type=NodePort --port=80 Get the service details:\nkubectl get service nginx-deployment Access the application:\nNote the NodePort value (e.g., 30008). Open a browser and navigate to http://\u0026lt;node_ip\u0026gt;:\u0026lt;NodePort\u0026gt; to see the Nginx welcome page. Step 6: Manage and Scale Your Cluster Scale the deployment:\nkubectl scale deployment nginx-deployment --replicas=4 Monitor cluster resources:\nkubectl top nodes kubectl top pods Delete the deployment and service (optional):\nkubectl delete deployment nginx-deployment kubectl delete service nginx-deployment FAQs Q: Why use K3s instead of full Kubernetes?\nA: K3s is lightweight and optimized for resource-constrained environments, making it ideal for homelabs.\nQ: Can I run K3s on a Raspberry Pi?\nA: Yes, K3s works well on Raspberry Pi (preferably Pi 4) for building ARM-based clusters.\nQ: How do I back up my K3s cluster?\nA: Back up the /etc/rancher/k3s directory and etcd snapshots.\nQ: Can I add more worker nodes later?\nA: Yes, use the same installation process with the master node’s token.\nQ: How do I secure my cluster?\nA: Configure Role-Based Access Control (RBAC), use HTTPS for the API server, and regularly update K3s.\nQ: What happens if the master node fails?\nA: Without HA (High Availability), the cluster’s control plane will be unavailable. For HA, deploy multiple master nodes.\nQ: How do I monitor my K3s cluster?\nA: Use tools like Prometheus, Grafana, or Kubernetes Dashboard for cluster monitoring.\nBy setting up a lightweight K3s cluster, you can explore the world of container orchestration and learn Kubernetes basics in a resource-efficient way. Happy experimenting!\n","permalink":"https://utechjapan.net/post/building-a-lightweight-kubernetes-cluster-with-k3s/","summary":"\u003ch2 id=\"what-youll-need\"\u003eWhat You’ll Need\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eAt least two nodes (one master, one worker) with Linux installed (e.g., Ubuntu 20.04 or newer).\u003c/li\u003e\n\u003cli\u003e2 GB RAM and 2 CPUs per node (minimum recommended).\u003c/li\u003e\n\u003cli\u003eBasic networking knowledge.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"step-1-prepare-the-nodes\"\u003eStep 1: Prepare the Nodes\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eUpdate each node\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo apt update \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e sudo apt upgrade -y\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eInstall required dependencies\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo apt install -y curl apt-transport-https\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eSet unique hostnames for each node\u003c/strong\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eOn the master node:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo hostnamectl set-hostname master-node\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOn the worker node(s):\u003c/p\u003e","title":"Building a Lightweight Kubernetes Cluster with K3s"},{"content":"What You’ll Need A server or virtual machine with Docker installed. Basic understanding of networking and file permissions. An SSH client for testing SFTP connections. Step 1: Install Docker (If Not Installed) Update the system packages:\nsudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y Install Docker:\nsudo apt install -y docker.io Enable and start Docker:\nsudo systemctl enable docker \u0026amp;\u0026amp; sudo systemctl start docker Step 2: Set Up the SFTP Directory Create a directory structure for SFTP users:\nmkdir -p ~/sftp/shared mkdir -p ~/sftp/user1 Set the appropriate permissions:\nchmod 700 ~/sftp/user1 chmod 755 ~/sftp/shared Step 3: Deploy the SFTP Server Using Docker Pull the SFTP Docker image:\ndocker pull atmoz/sftp Run the SFTP container:\ndocker run -d --name sftp-server \\ -p 2222:22 \\ -v ~/sftp:/home \\ atmoz/sftp \\ user1:password:1001 Replace user1 and password with your desired username and password. 1001 represents the user’s UID. Verify the container is running:\ndocker ps Step 4: Test the SFTP Server Connect to the server using an SFTP client:\nsftp -P 2222 user1@\u0026lt;server_ip\u0026gt; Navigate to the home directory:\ncd /home/user1 Upload and download files to test functionality:\nput testfile.txt get testfile.txt Step 5: Configure Additional Users Stop the SFTP container:\ndocker stop sftp-server Edit the docker run command to add more users:\ndocker run -d --name sftp-server \\ -p 2222:22 \\ -v ~/sftp:/home \\ atmoz/sftp \\ user1:password:1001 \\ user2:password:1002 Replace user2 and 1002 with the new user’s details. Restart the container:\ndocker start sftp-server Step 6: Secure Your SFTP Server Change the default password for users regularly:\nStop the container, modify the run command, and restart. Limit external access to SFTP:\nConfigure your firewall to allow only specific IPs to connect to port 2222. Monitor container logs for suspicious activity:\ndocker logs sftp-server FAQs Q: Can I use a different port for SFTP?\nA: Yes, change -p 2222:22 to another port (e.g., -p 2223:22).\nQ: How do I add more shared directories?\nA: Bind additional host directories to the container:\nbash docker run -d --name sftp-server \\ -p 2222:22 \\ -v ~/sftp:/home \\ -v ~/additional:/additional \\ atmoz/sftp Q: Is password-based authentication secure for SFTP?\nA: It’s secure if you use strong passwords, but SSH key-based authentication is recommended for better security.\nQ: How do I back up user data?\nA: Use tar or rsync to back up the ~/sftp directory:\nbash tar -czvf sftp-backup.tar.gz ~/sftp Q: Can I restrict users to their home directories?\nA: Yes, the Docker image automatically restricts users to their specified home directories.\nQ: How do I update the SFTP server?\nA: Pull the latest image and recreate the container:\nbash docker pull atmoz/sftp docker stop sftp-server docker rm sftp-server docker run -d --name sftp-server \\ -p 2222:22 \\ -v ~/sftp:/home \\ atmoz/sftp Q: Can I use SFTP without Docker?\nA: Yes, you can set up SFTP natively with OpenSSH, but Docker simplifies deployment and management.\nBy deploying an SFTP server with Docker, you can create a secure and efficient file transfer system for your homelab. Enjoy fast, private, and flexible file sharing!\n","permalink":"https://utechjapan.net/post/creating-a-secure-file-transfer-system-with-sftp-and-docker/","summary":"\u003ch2 id=\"what-youll-need\"\u003eWhat You’ll Need\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eA server or virtual machine with Docker installed.\u003c/li\u003e\n\u003cli\u003eBasic understanding of networking and file permissions.\u003c/li\u003e\n\u003cli\u003eAn SSH client for testing SFTP connections.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"step-1-install-docker-if-not-installed\"\u003eStep 1: Install Docker (If Not Installed)\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eUpdate the system packages\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo apt update \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e sudo apt upgrade -y\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eInstall Docker\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo apt install -y docker.io\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eEnable and start Docker\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo systemctl enable docker \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e sudo systemctl start docker\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"step-2-set-up-the-sftp-directory\"\u003eStep 2: Set Up the SFTP Directory\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCreate a directory structure for SFTP users\u003c/strong\u003e:\u003c/p\u003e","title":"Creating a Secure File Transfer System with SFTP and Docker"},{"content":"Proxmox Virtual Environment (Proxmox VE) is a powerful, open-source platform for virtualization. It allows you to run virtual machines (VMs) and containers efficiently, making it perfect for homelabs. This guide walks you through deploying a Proxmox VE server, enabling you to consolidate workloads and experiment with virtualized environments.\nWhat You’ll Need A dedicated machine for Proxmox VE (minimum specs: 4 GB RAM, 64-bit processor, and 32 GB storage). Proxmox VE ISO file from the Proxmox download page. A USB drive (at least 8 GB) for creating bootable media. A reliable internet connection. Step 1: Prepare the Installation Media Download the Proxmox VE ISO file from the official website.\nUse a tool like Rufus or balenaEtcher to create a bootable USB drive with the Proxmox ISO. Step 2: Install Proxmox VE Insert the bootable USB into your server and boot from it.\nFollow the installation wizard:\nAccept the license agreement. Select the target disk for installation. Configure the root password and email address. Set the network configuration (assign a static IP address for easier access). Complete the installation and reboot the server. Remove the USB drive during the reboot.\nStep 3: Access the Proxmox Web Interface On another device, open a web browser and go to: https://\u0026lt;your_proxmox_ip\u0026gt;:8006 Log in using the root credentials set during installation. Step 4: Update and Configure Proxmox VE Update Proxmox VE to ensure it has the latest features and security patches: apt update \u0026amp;\u0026amp; apt full-upgrade -y Disable the enterprise repository (if you’re not using a subscription): sed -i \u0026#39;s|deb https://enterprise.proxmox.com/debian|#deb https://enterprise.proxmox.com/debian|\u0026#39; /etc/apt/sources.list.d/pve-enterprise.list Add the Proxmox community repository: echo \u0026#34;deb http://download.proxmox.com/debian/pve bullseye pve-no-subscription\u0026#34; | sudo tee /etc/apt/sources.list.d/pve-no-subscription.list Refresh package lists and update: apt update \u0026amp;\u0026amp; apt full-upgrade -y Step 5: Set Up Storage Navigate to the Datacenter section in the web interface. Configure storage for VMs and containers: Add local storage for ISO images and backups. Add networked storage (NFS, CIFS) if needed. Step 6: Create Your First Virtual Machine (VM) Upload an ISO image (e.g., Ubuntu) to your Proxmox storage: Go to Datacenter \u0026gt; Storage \u0026gt; ISO Images \u0026gt; Upload.\nCreate a new VM: Navigate to Create VM in the Proxmox web interface. Follow the wizard to assign resources like CPU, RAM, and disk space. Start the VM and install the operating system. Step 7: Configure Containers (Optional) Proxmox VE supports LXC containers, which are lightweight alternatives to VMs.\nDownload container templates: Go to Datacenter \u0026gt; Storage \u0026gt; CT Templates \u0026gt; Templates \u0026gt; Download. Create a container: Navigate to Create CT and follow the wizard. Step 8: Backup and Restore Set up backups to ensure data safety: Go to Datacenter \u0026gt; Backup \u0026gt; Add to schedule backups. Restore VMs or containers by selecting Restore from the backup menu. FAQs Q: What is the difference between a VM and a container in Proxmox VE?\nA: VMs emulate an entire operating system, while containers share the host kernel, making them more lightweight and faster to deploy.\nQ: Can I use Proxmox VE on a Raspberry Pi?\nA: No, Proxmox VE requires a 64-bit x86 processor, which Raspberry Pis do not support.\nQ: How do I add a second storage drive to Proxmox VE?\nA: Use the web interface to configure storage:\nGo to Datacenter \u0026gt; Storage \u0026gt; Add and choose the storage type (e.g., Directory, LVM, NFS). Q: Does Proxmox VE support GPU passthrough?\nA: Yes, Proxmox VE supports GPU passthrough for VMs, allowing direct access to the GPU for intensive workloads.\nQ: Is Proxmox VE free?\nA: Yes, Proxmox VE is free and open source. However, you can purchase a subscription for access to the enterprise repository and support.\nQ: How do I access VMs from another device?\nA: Use the Proxmox web interface to access VMs via the integrated console or configure network access to the VM for SSH, RDP, or VNC.\nQ: Can I run Proxmox VE as a VM itself?\nA: Yes, Proxmox VE can run as a VM for testing purposes, but nested virtualization must be supported by the host.\nProxmox VE is a versatile platform that can turn your homelab into a virtualization powerhouse. Experiment, learn, and unlock the full potential of your homelab!\n","permalink":"https://utechjapan.net/post/deploying-a-proxmox-ve-server-for-virtualization-in-your-homelab/","summary":"\u003cp\u003eProxmox Virtual Environment (Proxmox VE) is a powerful, open-source platform for virtualization. It allows you to run virtual machines (VMs) and containers efficiently, making it perfect for homelabs. This guide walks you through deploying a Proxmox VE server, enabling you to consolidate workloads and experiment with virtualized environments.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"what-youll-need\"\u003eWhat You’ll Need\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eA dedicated machine for Proxmox VE (minimum specs: 4 GB RAM, 64-bit processor, and 32 GB storage).\u003c/li\u003e\n\u003cli\u003eProxmox VE ISO file from the \u003ca href=\"https://www.proxmox.com/en/downloads\"\u003eProxmox download page\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eA USB drive (at least 8 GB) for creating bootable media.\u003c/li\u003e\n\u003cli\u003eA reliable internet connection.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"step-1-prepare-the-installation-media\"\u003eStep 1: Prepare the Installation Media\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eDownload the Proxmox VE ISO file from the official website.\u003cbr\u003e\n\u003cimg alt=\"Proxmox Interface\" loading=\"lazy\" src=\"/images/downloadsproxmox.png\"\u003e\u003c/li\u003e\n\u003cli\u003eUse a tool like \u003ca href=\"https://rufus.ie/\"\u003eRufus\u003c/a\u003e or \u003ca href=\"https://www.balena.io/etcher/\"\u003ebalenaEtcher\u003c/a\u003e to create a bootable USB drive with the Proxmox ISO.\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"step-2-install-proxmox-ve\"\u003eStep 2: Install Proxmox VE\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eInsert the bootable USB into your server and boot from it.\u003c/p\u003e","title":"Deploying a Proxmox VE Server for Virtualization in Your HomeLab"},{"content":"Building a homelab is an exciting way to explore technology and learn new skills. However, choosing the right hardware can make or break your experience. Whether you’re hosting a Pi-hole server, deploying Kubernetes, or running a media server, this guide will help you select the best hardware for your homelab needs.\nKey Factors to Consider 1. Purpose of the Homelab Identify your goals:\nBasic Projects: DNS servers, lightweight apps, and monitoring tools. Intermediate Projects: Virtualization, Docker, and small Kubernetes clusters. Advanced Projects: High-performance computing, large-scale storage, and multi-node clusters. 2. Hardware Budget Your budget will dictate your hardware choices:\nLow Budget: Use Raspberry Pis, old laptops, or second-hand hardware. Mid-Range Budget: Mini PCs like Intel NUCs or used enterprise servers. High Budget: Build a custom server or purchase new enterprise-grade hardware. Hardware Options 1. Raspberry Pi Ideal for lightweight projects:\nPros: Low power consumption, small form factor, affordable. Cons: Limited resources for heavy workloads. Best For: Pi-hole, small Docker apps, lightweight web servers. 2. Repurposed Laptops or Desktops Great for starting without additional costs:\nPros: Free (if using old hardware), sufficient for many projects. Cons: Higher power consumption, limited upgrade options. Best For: Entry-level projects, basic virtual machines. 3. Intel NUC or Mini PCs Compact yet powerful options for homelabs:\nPros: Quiet, energy-efficient, customizable specs. Cons: Higher cost compared to Raspberry Pi. Best For: Virtualization, Docker, media servers. 4. Used Enterprise Servers Powerful and scalable for larger workloads:\nPros: High performance, support for multiple VMs and storage options. Cons: Loud, power-hungry, and may need server racks. Best For: Advanced homelabs with virtualization and Kubernetes. 5. Custom-Built Servers Highly customizable for specific needs:\nPros: Tailored performance, scalability, and efficiency. Cons: High initial cost and technical knowledge required. Best For: Enthusiasts and advanced users. Storage Considerations 1. SSDs vs. HDDs SSDs: Faster, ideal for frequently accessed data and applications. HDDs: Cheaper, suitable for bulk storage. 2. Network Attached Storage (NAS) Centralize storage across your homelab. Look for solutions like Synology or DIY options with TrueNAS. Networking Hardware 1. Routers and Switches Choose a router that supports VLANs for better network segmentation. Use managed switches for enhanced control over network traffic. 2. Wi-Fi or Ethernet For reliability, hardwire critical devices with Ethernet. Use Wi-Fi for flexibility or where wiring isn’t feasible. Cooling and Power Considerations Cooling:\nEnsure good airflow to prevent overheating. Use quiet fans or rack-mounted cooling solutions. Power Backup:\nInvest in a UPS (Uninterruptible Power Supply) to protect against outages. FAQs Q: Can I build a homelab on a tight budget?\nA: Yes, you can repurpose old hardware, use Raspberry Pis, or buy second-hand servers to get started.\nQ: What hardware is best for virtualization?\nA: Used enterprise servers or Intel NUCs are great options for running virtual machines.\nQ: How much RAM do I need for a homelab?\nA:\nBasic Projects: 2–4 GB. Intermediate Projects: 8–16 GB. Advanced Projects: 32 GB or more. Q: Are Raspberry Pis good for a homelab?\nA: Raspberry Pis are excellent for lightweight projects like Pi-hole, small web servers, and monitoring tools.\nQ: What should I prioritize: CPU or RAM?\nA: It depends on your use case. For virtualization, prioritize RAM. For computation-heavy tasks, focus on CPU performance.\nQ: Do I need a dedicated room for my homelab?\nA: Not necessarily. However, consider a well-ventilated space to handle heat and noise.\nQ: How do I expand storage for my homelab?\nA: Use external drives, NAS devices, or configure a server with multiple hard drives.\nWith the right hardware, your homelab can become a powerful playground for learning and experimentation. Choose wisely and enjoy the journey into building your own tech haven!\n","permalink":"https://utechjapan.net/post/choosing-the-right-hardware-for-your-projects/","summary":"\u003cp\u003eBuilding a homelab is an exciting way to explore technology and learn new skills. However, choosing the right hardware can make or break your experience. Whether you’re hosting a Pi-hole server, deploying Kubernetes, or running a media server, this guide will help you select the best hardware for your homelab needs.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"key-factors-to-consider\"\u003eKey Factors to Consider\u003c/h2\u003e\n\u003ch3 id=\"1-purpose-of-the-homelab\"\u003e\u003cstrong\u003e1. Purpose of the Homelab\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eIdentify your goals:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eBasic Projects\u003c/strong\u003e: DNS servers, lightweight apps, and monitoring tools.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIntermediate Projects\u003c/strong\u003e: Virtualization, Docker, and small Kubernetes clusters.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAdvanced Projects\u003c/strong\u003e: High-performance computing, large-scale storage, and multi-node clusters.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"2-hardware-budget\"\u003e\u003cstrong\u003e2. Hardware Budget\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eYour budget will dictate your hardware choices:\u003c/p\u003e","title":"HomeLab Essentials: Choosing the Right Hardware for Your Projects"},{"content":"What You’ll Need A dedicated device or virtual machine to install pfSense. A basic understanding of networking concepts. Access to your home network’s router for setup. Step 1: Install pfSense Download pfSense ISO:\nVisit the official pfSense website and download the ISO. Choose the correct architecture for your hardware (e.g., AMD64). Create a Bootable USB Drive:\nsudo dd if=/path/to/pfsense.iso of=/dev/sdX bs=1M Replace /path/to/pfsense.iso with the path to the ISO file. Replace /dev/sdX with the correct USB drive identifier. Install pfSense on Your Device:\nBoot the target device from the USB drive. Follow the installation prompts to install pfSense. Step 2: Basic Configuration Log into the pfSense Web Interface:\nOpen a browser and navigate to http://192.168.1.1. Default credentials: Username: admin Password: pfsense Run the Setup Wizard:\nConfigure your LAN and WAN interfaces. Set a secure admin password. Step 3: Create Firewall Rules Navigate to the Firewall Rules Page:\nGo to Firewall \u0026gt; Rules in the pfSense web interface. Add a Rule to Block Specific Traffic:\nClick Add to create a new rule. Set the Action to Block. Specify the source and destination IP ranges. Save and apply the rule. Add a Rule to Allow LAN to WAN Traffic:\nAction: Pass Interface: LAN Protocol: Any Source: LAN net Destination: Any Save and apply changes. Step 4: Enable VLANs for Network Segmentation Create VLANs:\nGo to Interfaces \u0026gt; Assignments \u0026gt; VLANs. Add VLAN IDs (e.g., 10 for IoT, 20 for trusted devices). Assign VLAN Interfaces:\nNavigate to Interfaces \u0026gt; Assignments. Assign each VLAN to a new interface. Configure Firewall Rules for VLANs:\nSet up rules to isolate VLAN traffic or allow specific inter-VLAN communication. Step 5: Configure DNS and DHCP Set Up DNS Resolver:\nGo to Services \u0026gt; DNS Resolver. Enable the resolver and configure overrides if needed. Configure DHCP for Each VLAN:\nNavigate to Services \u0026gt; DHCP Server. Assign IP ranges for each VLAN. Step 6: Monitor and Maintain pfSense Enable Logging:\nGo to Status \u0026gt; System Logs. Monitor logs for firewall events and network activity. Regularly Update pfSense:\npkg update \u0026amp;\u0026amp; pkg upgrade Backup pfSense Configuration:\nNavigate to Diagnostics \u0026gt; Backup \u0026amp; Restore. Save a copy of your configuration file. FAQs Q: Why should I use pfSense in my homelab?\nA: pfSense offers enterprise-grade features like firewall rules, VLANs, and VPNs for enhanced network control.\nQ: Can pfSense run on a Raspberry Pi?\nA: No, pfSense requires x86_64 architecture. Consider alternatives like OPNsense for ARM devices.\nQ: How do I restore pfSense after a failure?\nA: Use the configuration backup file to quickly restore settings from the web interface.\nQ: Can I use pfSense for VPNs?\nA: Yes, pfSense supports VPN setups like OpenVPN and IPsec for secure remote access.\nQ: How do I block specific websites with pfSense?\nA: Use pfSense’s DNS resolver with overrides or install the Squid proxy package for advanced filtering.\nQ: What’s the difference between pfSense and OPNsense?\nA: Both are open-source firewall solutions; pfSense is more mature, while OPNsense focuses on frequent updates and user-friendly features.\nQ: How do I test firewall rules?\nA: Use tools like ping and traceroute to verify connectivity and logs to analyze blocked traffic.\nBy configuring pfSense, you can achieve a secure, segmented, and well-managed network for your homelab. Enjoy enhanced control and peace of mind!\n","permalink":"https://utechjapan.net/post/homelab-networking-configuring-pfsense-for-advanced-firewall-rules/","summary":"\u003ch2 id=\"what-youll-need\"\u003eWhat You’ll Need\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eA dedicated device or virtual machine to install pfSense.\u003c/li\u003e\n\u003cli\u003eA basic understanding of networking concepts.\u003c/li\u003e\n\u003cli\u003eAccess to your home network’s router for setup.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"step-1-install-pfsense\"\u003eStep 1: Install pfSense\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDownload pfSense ISO\u003c/strong\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eVisit the \u003ca href=\"https://www.pfsense.org/download/\"\u003eofficial pfSense website\u003c/a\u003e and download the ISO.\u003c/li\u003e\n\u003cli\u003eChoose the correct architecture for your hardware (e.g., AMD64).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCreate a Bootable USB Drive\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo dd \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e/path/to/pfsense.iso of\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e/dev/sdX bs\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e1M\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eReplace \u003ccode\u003e/path/to/pfsense.iso\u003c/code\u003e with the path to the ISO file.\u003c/li\u003e\n\u003cli\u003eReplace \u003ccode\u003e/dev/sdX\u003c/code\u003e with the correct USB drive identifier.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eInstall pfSense on Your Device\u003c/strong\u003e:\u003c/p\u003e","title":"HomeLab Networking: Configuring pfSense for Advanced Firewall Rules"},{"content":"A well-designed network is essential for a secure and efficient homelab. VLANs (Virtual Local Area Networks) allow you to segment your network into separate logical groups, improving security, performance, and manageability. In this guide, we’ll cover the basics of VLANs and walk you through setting them up in your homelab.\nWhat You’ll Need A managed switch that supports VLANs (e.g., TP-Link, Netgear, or Ubiquiti). A router or firewall capable of VLAN tagging (e.g., pfSense, OPNSense). Basic understanding of IP addresses and subnetting. Step 1: Understand VLAN Basics What Are VLANs? VLANs divide a physical network into multiple virtual networks. Devices on different VLANs cannot communicate directly without a router or Layer 3 switch.\nWhy Use VLANs? Security: Isolate devices to prevent unauthorized access. Performance: Reduce broadcast traffic by grouping devices logically. Management: Simplify network organization for IoT, servers, and workstations. Step 2: Plan Your VLANs Create a plan for how you’ll segment your network. Example:\nVLAN 10: Trusted devices (PCs, laptops). VLAN 20: IoT devices (smart bulbs, cameras). VLAN 30: Servers (homelab VMs, NAS). Assign each VLAN an IP subnet:\nVLAN 10: 192.168.10.0/24 VLAN 20: 192.168.20.0/24 VLAN 30: 192.168.30.0/24 Step 3: Configure VLANs on Your Switch Access the Switch Management Interface:\nOpen your browser and go to the switch\u0026rsquo;s IP address. Log in with admin credentials. Create VLANs:\nNavigate to the VLAN configuration page. Add VLANs and assign each a unique VLAN ID (e.g., 10, 20, 30). Tag Ports for Trunk and Access:\nTrunk Ports: Carry multiple VLANs to your router or other switches. Access Ports: Assign specific VLANs to end devices. Example:\nPort 1: Trunk (carries VLAN 10, 20, and 30). Port 2: Access (VLAN 10). Port 3: Access (VLAN 20). Step 4: Configure VLANs on Your Router or Firewall Enable VLAN Tagging:\nAccess your router or firewall’s management interface. Go to the interface or network settings and enable VLAN tagging. Create VLAN Interfaces:\nAdd a virtual interface for each VLAN (e.g., VLAN 10, VLAN 20, VLAN 30). Assign each VLAN a static IP from its respective subnet. Set Up DHCP:\nConfigure a DHCP server for each VLAN to assign IP addresses automatically. Add Firewall Rules:\nAllow or block traffic between VLANs based on your security needs. Example: Block traffic from IoT VLAN to trusted devices VLAN. Step 5: Verify and Test VLANs Connect a device to a VLAN-configured port on your switch. Check the device’s IP address to ensure it’s in the correct subnet. Test communication between VLANs: Ping devices on different VLANs to verify connectivity (or lack thereof if blocked by firewall rules). FAQs Q: Can I use VLANs with an unmanaged switch?\nA: No, VLANs require a managed switch capable of VLAN tagging (802.1Q standard).\nQ: How many VLANs can I create?\nA: The limit depends on your hardware. Most managed switches support up to 4096 VLAN IDs.\nQ: Do VLANs slow down network performance?\nA: No, VLANs typically improve performance by reducing broadcast traffic.\nQ: How do I secure inter-VLAN traffic?\nA: Use firewall rules to control traffic between VLANs, allowing only necessary communication.\nQ: Can I use VLANs on Wi-Fi?\nA: Yes, many access points support SSID-to-VLAN mapping, allowing you to segment wireless traffic.\nQ: What happens if a device is connected to the wrong VLAN?\nA: The device will receive an IP address from the wrong subnet and may not access intended resources.\nQ: How do I troubleshoot VLAN issues?\nA: Check the following:\nCorrect VLAN IDs on switch ports. Proper IP subnet configuration on VLAN interfaces. Firewall rules blocking unintended traffic. By configuring VLANs in your homelab, you’ll gain better control over your network, enhance security, and optimize performance. Enjoy your segmented and secure setup!\n","permalink":"https://utechjapan.net/post/homelab-networking-configuring-vlans-for-segmented-traffic/","summary":"\u003cp\u003eA well-designed network is essential for a secure and efficient homelab. VLANs (Virtual Local Area Networks) allow you to segment your network into separate logical groups, improving security, performance, and manageability. In this guide, we’ll cover the basics of VLANs and walk you through setting them up in your homelab.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"what-youll-need\"\u003eWhat You’ll Need\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eA managed switch that supports VLANs (e.g., TP-Link, Netgear, or Ubiquiti).\u003c/li\u003e\n\u003cli\u003eA router or firewall capable of VLAN tagging (e.g., pfSense, OPNSense).\u003c/li\u003e\n\u003cli\u003eBasic understanding of IP addresses and subnetting.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"step-1-understand-vlan-basics\"\u003eStep 1: Understand VLAN Basics\u003c/h2\u003e\n\u003ch3 id=\"what-are-vlans\"\u003e\u003cstrong\u003eWhat Are VLANs?\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eVLANs divide a physical network into multiple virtual networks. Devices on different VLANs cannot communicate directly without a router or Layer 3 switch.\u003c/p\u003e","title":"HomeLab Networking: Configuring VLANs for Segmented Traffic"},{"content":"Are you tired of intrusive ads, tracking scripts, and sluggish internet performance caused by unnecessary network traffic? A Pi-hole DNS server can solve these problems by acting as a network-wide ad blocker and improving overall browsing speed. This blog post will walk you through the process of setting up Pi-hole at home, step by step.\nWhat You’ll Need A Raspberry Pi (recommended: Raspberry Pi 3 or newer) or any machine that can run Docker. MicroSD card (if using a Raspberry Pi). Home router with access to DNS settings. Basic understanding of Linux commands. Step 1: Install the Operating System If using a Raspberry Pi:\nDownload the latest version of Raspberry Pi OS Lite from the official Raspberry Pi website. Flash the image to a MicroSD card using tools like Rufus or balenaEtcher. Insert the SD card into your Raspberry Pi and power it up. Step 2: Update and Prepare Your System Log into the Raspberry Pi or the server via SSH (default user for Raspberry Pi OS is pi, and the password is raspberry). ssh pi@\u0026lt;raspberry_pi_ip_address\u0026gt;` Update the system packages: `sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y` Install dependencies: `sudo apt install curl -y` Step 3: Install Pi-hole Use the one-line installation command from the Pi-hole official website: `curl -sSL https://install.pi-hole.net | bash` Follow the interactive setup prompts: Choose your upstream DNS provider (e.g., Google, OpenDNS, Cloudflare). Set the static IP address for your Pi-hole server. Confirm installation of the admin interface. Step 4: Configure Your Router Access your router\u0026rsquo;s admin dashboard (usually accessible at 192.168.1.1 or 192.168.0.1). Go to the DNS settings and update the primary DNS server to point to your Pi-hole’s IP address. Save the changes and restart the router. Step 5: Access the Pi-hole Admin Panel Open a web browser and navigate to http://\u0026lt;your_pihole_ip\u0026gt;/admin. Log in using the password provided at the end of the installation (or set a new one using the command below): `pihole -a -p` From here, you can view blocked domains, customize blocklists, and tweak settings. Step 6: Advanced Configuration (Optional) Add More Blocklists:\nGo to Settings \u0026gt; Blocklists. Add URLs of additional blocklists, such as StevenBlack’s list. Integrate with Unbound for Local DNS Resolution:\n`sudo apt install unbound -y` Configure /etc/unbound/unbound.conf.d/pi-hole.conf for enhanced DNS privacy.\nStep 7: Monitor and Maintain Use the Pi-hole web interface to monitor blocked queries. Regularly update Pi-hole: `pihole -up` FAQs Q: Can I run Pi-hole on a different device instead of a Raspberry Pi?\nA: Yes, Pi-hole can run on any Linux-based device, including a virtual machine, Docker container, or bare-metal server.\nQ: Will Pi-hole block ads on YouTube and other apps?\nA: Pi-hole primarily blocks ads at the DNS level, so while it can block many ads, platform-specific ads like YouTube pre-rolls might still appear.\nQ: What happens if Pi-hole goes offline?\nA: If Pi-hole is unavailable, DNS queries won’t resolve unless you configure a fallback DNS server in your router or devices.\nQ: Can I use Pi-hole with IPv6?\nA: Absolutely! During installation, Pi-hole can be configured to handle both IPv4 and IPv6 traffic.\nQ: How do I reset the admin password?\nA: Use the following command:\n`pihole -a -p` Q: Does Pi-hole log my DNS queries?\nA: Yes, but you can configure it to anonymize or disable logging entirely through the web interface.\nQ: How do I uninstall Pi-hole if needed?\nA: Run the following command:\n`pihole uninstall` By following these steps, you can enjoy an ad-free and faster internet experience. Happy homelabbing!\n","permalink":"https://utechjapan.net/post/how-to-build-a-home-dns-server-with-pi-hole-for-network-wide-ad-blocking/","summary":"\u003cp\u003eAre you tired of intrusive ads, tracking scripts, and sluggish internet performance caused by unnecessary network traffic? A Pi-hole DNS server can solve these problems by acting as a network-wide ad blocker and improving overall browsing speed. This blog post will walk you through the process of setting up Pi-hole at home, step by step.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"what-youll-need\"\u003eWhat You’ll Need\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eA Raspberry Pi (recommended: Raspberry Pi 3 or newer) or any machine that can run Docker.\u003c/li\u003e\n\u003cli\u003eMicroSD card (if using a Raspberry Pi).\u003c/li\u003e\n\u003cli\u003eHome router with access to DNS settings.\u003c/li\u003e\n\u003cli\u003eBasic understanding of Linux commands.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"step-1-install-the-operating-system\"\u003eStep 1: Install the Operating System\u003c/h2\u003e\n\u003cp\u003eIf using a Raspberry Pi:\u003c/p\u003e","title":"How to Build a Home DNS Server with Pi-hole for Network-Wide Ad Blocking"},{"content":"Creating a home media server is one of the most rewarding homelab projects, allowing you to centralize and stream your media collection across all devices. Plex and Jellyfin are two popular tools for setting up a media server, each offering unique features. This guide walks you through installing and configuring both options so you can pick the one that works best for you.\nWhat You’ll Need A dedicated machine (e.g., Raspberry Pi, NAS, or a repurposed desktop/laptop). A storage device for your media files (e.g., HDDs, SSDs, or a NAS). A stable internet connection for remote access and metadata fetching. Basic knowledge of Linux commands (optional if using GUI-based installation). Step 1: Decide Between Plex and Jellyfin Plex Pros: Polished interface, remote streaming capabilities, wide device compatibility. Cons: Some features require a subscription (Plex Pass). Jellyfin Pros: 100% free and open source, privacy-focused, and customizable. Cons: Slightly less polished interface compared to Plex. Choose your preferred software based on these factors, or try both to see which suits your needs.\nStep 2: Install the Software Option 1: Installing Plex On a Linux Machine: curl https://downloads.plex.tv/plex-keys/PlexSign.key | sudo apt-key add - echo \u0026#34;deb https://downloads.plex.tv/repo/deb public main\u0026#34; | sudo tee /etc/apt/sources.list.d/plexmediaserver.list sudo apt update sudo apt install plexmediaserver On a Raspberry Pi:\nPlex offers an official build for Raspberry Pi. Download the appropriate .deb file from the Plex downloads page and install it: sudo dpkg -i plexmediaserver_*.deb Access Plex Web Interface: Open your browser and go to http://\u0026lt;your_server_ip\u0026gt;:32400/web. Sign in or create a Plex account to configure your library. Option 2: Installing Jellyfin On a Linux Machine: sudo apt install apt-transport-https ca-certificates software-properties-common wget -O - https://repo.jellyfin.org/jellyfin_team.gpg.key | sudo apt-key add - echo \u0026#34;deb [arch=$( dpkg --print-architecture )] https://repo.jellyfin.org/debian $(lsb_release -cs) main\u0026#34; | sudo tee /etc/apt/sources.list.d/jellyfin.list sudo apt update sudo apt install jellyfin On a Raspberry Pi: Download the ARM version of Jellyfin from the official website and follow the installation guide. Access Jellyfin Web Interface: Open your browser and go to http://\u0026lt;your_server_ip\u0026gt;:8096. Follow the setup wizard to create your admin account and configure your media library. Step 3: Add Media Libraries Go to the \u0026ldquo;Libraries\u0026rdquo; section in the web interface (Plex or Jellyfin). Add a new library for each media type (e.g., Movies, TV Shows, Music). Select the folder where your media is stored. Allow Plex or Jellyfin to scan the folder and fetch metadata. Step 4: Configure Remote Access (Optional) Plex: Enable remote access in the server settings. Port forward 32400 on your router to the server\u0026rsquo;s IP address. Jellyfin: Set up HTTPS for secure remote access. Port forward 8096 (HTTP) or 8920 (HTTPS) on your router to the server\u0026rsquo;s IP address. Step 5: Stream Your Media Install the Plex or Jellyfin app on your devices (e.g., phones, smart TVs, tablets). Sign in to your server and start streaming your media collection. FAQs Q: Which software is better for privacy?\nA: Jellyfin is more privacy-focused since it doesn’t rely on cloud accounts or external services.\nQ: Do I need a Plex Pass to use Plex?\nA: No, Plex is free to use for most features, but Plex Pass unlocks additional perks like hardware transcoding, offline downloads, and DVR.\nQ: Can I run Plex or Jellyfin on a Raspberry Pi?\nA: Yes, both can run efficiently on a Raspberry Pi 4 or newer.\nQ: How do I add subtitles to my media?\nA: Both Plex and Jellyfin support embedded subtitles and external .srt files. You can also fetch subtitles using integrated tools.\nQ: What happens if my media server goes offline?\nA: You won’t be able to stream your media until the server is back online. Ensure reliable power and network connections.\nQ: Can I sync my media for offline viewing?\nA: Plex supports offline downloads with a Plex Pass. Jellyfin offers third-party plugins for similar functionality.\nQ: Can I migrate my library from Plex to Jellyfin (or vice versa)?\nA: Yes, tools like jellyfin-metadata or Plex2Jelly can help transfer metadata and settings between the platforms.\nWith your media server up and running, you can enjoy your favorite movies, TV shows, and music from anywhere. Happy streaming!\n","permalink":"https://utechjapan.net/post/how-to-create-a-media-server-at-home-with-plex-and-jellyfin/","summary":"\u003cp\u003eCreating a home media server is one of the most rewarding homelab projects, allowing you to centralize and stream your media collection across all devices. Plex and Jellyfin are two popular tools for setting up a media server, each offering unique features. This guide walks you through installing and configuring both options so you can pick the one that works best for you.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"what-youll-need\"\u003eWhat You’ll Need\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eA dedicated machine (e.g., Raspberry Pi, NAS, or a repurposed desktop/laptop).\u003c/li\u003e\n\u003cli\u003eA storage device for your media files (e.g., HDDs, SSDs, or a NAS).\u003c/li\u003e\n\u003cli\u003eA stable internet connection for remote access and metadata fetching.\u003c/li\u003e\n\u003cli\u003eBasic knowledge of Linux commands (optional if using GUI-based installation).\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"step-1-decide-between-plex-and-jellyfin\"\u003eStep 1: Decide Between Plex and Jellyfin\u003c/h2\u003e\n\u003ch3 id=\"plex\"\u003e\u003cstrong\u003ePlex\u003c/strong\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePros\u003c/strong\u003e: Polished interface, remote streaming capabilities, wide device compatibility.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCons\u003c/strong\u003e: Some features require a subscription (Plex Pass).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"jellyfin\"\u003e\u003cstrong\u003eJellyfin\u003c/strong\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePros\u003c/strong\u003e: 100% free and open source, privacy-focused, and customizable.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCons\u003c/strong\u003e: Slightly less polished interface compared to Plex.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eChoose your preferred software based on these factors, or try both to see which suits your needs.\u003c/p\u003e","title":"How to Create a Media Server at Home with Plex and Jellyfin"},{"content":"Nextcloud is an open-source platform for private cloud storage and collaboration. By hosting Nextcloud in your homelab, you can securely store files, manage calendars, and sync data across devices—all without relying on third-party services. This guide walks you through installing and configuring Nextcloud on your homelab server.\nWhat You’ll Need A server or virtual machine with at least: 2 GB RAM and 1 CPU (for small deployments). 20 GB of storage (or more for large file collections). Linux installed (Ubuntu 20.04 or newer is recommended). A static IP or domain name. Step 1: Update and Prepare Your Server Log into your server: ssh user@\u0026lt;server_ip\u0026gt; Update the system packages: sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y Install necessary dependencies: sudo apt install -y apache2 mariadb-server libapache2-mod-php php php-mysql php-xml php-mbstring php-curl php-zip php-gd unzip Step 2: Set Up the Database Secure MariaDB: sudo mysql_secure_installation Follow the prompts to set a root password and remove unnecessary settings.\nCreate a Nextcloud database: sudo mysql -u root -p CREATE DATABASE nextcloud; CREATE USER \u0026#39;nextclouduser\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED BY \u0026#39;yourpassword\u0026#39;; GRANT ALL PRIVILEGES ON nextcloud.* TO \u0026#39;nextclouduser\u0026#39;@\u0026#39;localhost\u0026#39;; FLUSH PRIVILEGES; EXIT; Step 3: Download and Configure Nextcloud Download Nextcloud: wget https://download.nextcloud.com/server/releases/latest.zip Unzip the files: unzip latest.zip sudo mv nextcloud /var/www/ Set the correct permissions: sudo chown -R www-data:www-data /var/www/nextcloud sudo chmod -R 750 /var/www/nextcloud Step 4: Configure Apache Create a new site configuration: sudo nano /etc/apache2/sites-available/nextcloud.conf Add the following configuration: \u0026lt;VirtualHost *:80\u0026gt; ServerAdmin admin@yourdomain.com DocumentRoot /var/www/nextcloud ServerName yourdomain.com\rAlias /nextcloud \u0026#34;/var/www/nextcloud/\u0026#34;\r\u0026lt;Directory /var/www/nextcloud/\u0026gt;\rRequire all granted\rAllowOverride All\rOptions FollowSymlinks MultiViews\r\u0026lt;/Directory\u0026gt;\rErrorLog ${APACHE_LOG_DIR}/error.log\rCustomLog ${APACHE_LOG_DIR}/access.log combined\r\u0026lt;/VirtualHost\u0026gt; ``` 3. **Enable the site and necessary modules**: ``` sudo a2ensite nextcloud.conf sudo a2enmod rewrite headers env dir mime sudo systemctl reload apache2 ``` Step 5: Complete the Installation Open your web browser and navigate to: http://\u0026lt;your_server_ip\u0026gt;/nextcloud Create an admin account and configure the database: Database User: nextclouduser Password: yourpassword Database Name: nextcloud Click Finish Setup to complete the installation. Step 6: Enable SSL (Optional) Install Certbot for Let\u0026rsquo;s Encrypt: sudo apt install -y certbot python3-certbot-apache Obtain and install the certificate: sudo certbot --apache -d yourdomain.com Verify the certificate renewal process: sudo certbot renew --dry-run FAQs Q: Can I use Nextcloud on a Raspberry Pi?\nA: Yes, Nextcloud works well on a Raspberry Pi 4 or newer, especially with NextcloudPi—a preconfigured image optimized for Raspberry Pi.\nQ: How do I update Nextcloud?\nA: Use the built-in updater in the Nextcloud web interface or manually replace files with the latest version.\nQ: Is SSL mandatory for Nextcloud?\nA: SSL is not mandatory but strongly recommended for secure communication.\nQ: How do I sync files across devices?\nA: Install the Nextcloud client on your PC or mobile device and log in with your server credentials.\nQ: Can I expand storage later?\nA: Yes, you can add external drives or configure network storage (e.g., NFS, SMB) in Nextcloud’s admin settings.\nQ: How do I back up my Nextcloud server?\nA: Back up the /var/www/nextcloud directory, database, and any external storage. Use tools like rsync for automation.\nQ: Can I enable additional features like calendars and contacts?\nA: Yes, Nextcloud offers apps for calendars, contacts, and more in the App Store section of the admin interface.\nDeploying Nextcloud in your homelab gives you complete control over your cloud storage and collaboration tools. Enjoy your new private cloud solution!\n","permalink":"https://utechjapan.net/post/how-to-deploy-nextcloud-for-private-cloud-storage-in-your-homelab/","summary":"\u003cp\u003eNextcloud is an open-source platform for private cloud storage and collaboration. By hosting Nextcloud in your homelab, you can securely store files, manage calendars, and sync data across devices—all without relying on third-party services. This guide walks you through installing and configuring Nextcloud on your homelab server.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"what-youll-need\"\u003eWhat You’ll Need\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eA server or virtual machine with at least:\n\u003cul\u003e\n\u003cli\u003e2 GB RAM and 1 CPU (for small deployments).\u003c/li\u003e\n\u003cli\u003e20 GB of storage (or more for large file collections).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eLinux installed (Ubuntu 20.04 or newer is recommended).\u003c/li\u003e\n\u003cli\u003eA static IP or domain name.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"step-1-update-and-prepare-your-server\"\u003eStep 1: Update and Prepare Your Server\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eLog into your server\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003essh user@\u0026lt;server_ip\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eUpdate the system packages\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eInstall necessary dependencies\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo apt install -y apache2 mariadb-server libapache2-mod-php  \r\nphp php-mysql php-xml php-mbstring php-curl php-zip php-gd unzip\n\u003c/code\u003e\u003c/pre\u003e\u003chr\u003e\n\u003ch2 id=\"step-2-set-up-the-database\"\u003eStep 2: Set Up the Database\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eSecure MariaDB\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo mysql_secure_installation\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFollow the prompts to set a root password and remove unnecessary settings.\u003c/p\u003e","title":"How to Deploy Nextcloud for Private Cloud Storage in Your HomeLab"},{"content":"What You’ll Need A server or virtual machine to run Prometheus and Grafana (recommended: 2 GB RAM, 2 CPUs). Docker installed (or native installation on Linux). Basic understanding of system metrics and networking. Step 1: Install Prometheus Create a Prometheus data directory:\nmkdir -p ~/prometheus/data Create a Prometheus configuration file:\nnano ~/prometheus/prometheus.yml Add the following content to scrape metrics from localhost:\nglobal: scrape_interval: 15s scrape_configs: - job_name: \u0026#39;prometheus\u0026#39; static_configs: - targets: [\u0026#39;localhost:9090\u0026#39;] Run Prometheus using Docker:\ndocker run -d --name prometheus -p 9090:9090 \\ -v ~/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml \\ -v ~/prometheus/data:/prometheus \\ prom/prometheus Access Prometheus:\nOpen your browser and navigate to http://\u0026lt;server_ip\u0026gt;:9090.\nStep 2: Install Grafana Run Grafana using Docker:\ndocker run -d --name=grafana -p 3000:3000 grafana/grafana Access Grafana:\nOpen your browser and navigate to http://\u0026lt;server_ip\u0026gt;:3000.\nDefault username: admin Default password: admin Change the default password when prompted.\nStep 3: Connect Prometheus to Grafana Add Prometheus as a data source:\nIn Grafana, go to Settings \u0026gt; Data Sources \u0026gt; Add Data Source. Choose Prometheus from the list. Set the URL to http://\u0026lt;server_ip\u0026gt;:9090. Click Save \u0026amp; Test to verify the connection.\nStep 4: Create Dashboards Import a prebuilt dashboard:\nGo to Create \u0026gt; Import in Grafana. Use a popular dashboard ID from the Grafana Dashboard Library, like 1860 (Node Exporter Full). Customize your dashboard:\nAdd or remove panels based on the metrics you care about. Step 5: Set Up Alerts in Grafana Create a new alert:\nOpen any panel in your dashboard. Click on the bell icon and configure alert conditions. Set up notification channels:\nGo to Alerting \u0026gt; Notification Channels in Grafana. Add methods like email, Slack, or webhooks for alerts. FAQs Q: Can I run Prometheus and Grafana on the same server?\nA: Yes, they are lightweight and can run together on a single machine.\nQ: What kind of metrics can I monitor?\nA: You can monitor system performance (CPU, memory, disk usage), network activity, application-specific metrics, and more.\nQ: How do I secure Prometheus and Grafana?\nA: Use reverse proxies like Nginx with HTTPS enabled and restrict access to trusted IPs.\nQ: Can I add other data sources to Grafana?\nA: Yes, Grafana supports multiple data sources, including InfluxDB, Elasticsearch, and MySQL.\nQ: How do I persist Grafana data?\nA: Use Docker volumes to store Grafana data, like:\nbash\rdocker run -d --name=grafana -p 3000:3000 \\\r-v ~/grafana/data:/var/lib/grafana \\\rgrafana/grafana\rQ: Can I set up notifications without Grafana?\nA: Yes, Prometheus supports its own alerting rules and integrates with Alertmanager for notifications.\nQ: How do I scale Prometheus?\nA: Use Prometheus federation or set up a Thanos instance for scalable storage and querying.\nBy deploying Prometheus and Grafana, you can keep a close eye on your homelab’s performance and ensure everything runs smoothly. Happy monitoring!\n","permalink":"https://utechjapan.net/post/monitoring-and-alerting-in-your-homelab-with-prometheus-and-grafana/","summary":"\u003ch2 id=\"what-youll-need\"\u003eWhat You’ll Need\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eA server or virtual machine to run Prometheus and Grafana (recommended: 2 GB RAM, 2 CPUs).\u003c/li\u003e\n\u003cli\u003eDocker installed (or native installation on Linux).\u003c/li\u003e\n\u003cli\u003eBasic understanding of system metrics and networking.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"step-1-install-prometheus\"\u003eStep 1: Install Prometheus\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCreate a Prometheus data directory\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emkdir -p ~/prometheus/data\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCreate a Prometheus configuration file\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enano ~/prometheus/prometheus.yml\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAdd the following content to scrape metrics from \u003ccode\u003elocalhost\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eglobal\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003escrape_interval\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e15s\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003escrape_configs\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - \u003cspan style=\"color:#f92672\"\u003ejob_name\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;prometheus\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003estatic_configs\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#f92672\"\u003etargets\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;localhost:9090\u0026#39;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eRun Prometheus using Docker\u003c/strong\u003e:\u003c/p\u003e","title":"Monitoring and Alerting in Your HomeLab with Prometheus and Grafana"},{"content":"What You’ll Need A Raspberry Pi or server running Pi-hole. Basic knowledge of Linux commands. An active internet connection. Step 1: Update Your Pi-hole Installation Log into your Pi-hole server via SSH:\nssh pi@\u0026lt;pi-hole_ip_address\u0026gt; Update Pi-hole to the latest version:\npihole -up Ensure the system is up to date:\nsudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y Step 2: Install Unbound Install Unbound on your Pi-hole server:\nsudo apt install unbound -y Verify the installation:\nunbound -h Step 3: Configure Unbound for Recursive DNS Create a configuration file for Unbound:\nsudo nano /etc/unbound/unbound.conf.d/pi-hole.conf Add the following configuration:\nserver: verbosity: 1 interface: 127.0.0.1 port: 5335 root-hints: \u0026#34;/var/lib/unbound/root.hints\u0026#34; cache-min-ttl: 3600 cache-max-ttl: 86400 prefetch: yes num-threads: 2 private-address: 192.168.0.0/16 private-address: 172.16.0.0/12 private-address: 10.0.0.0/8 Download root hints file:\nsudo curl -o /var/lib/unbound/root.hints https://www.internic.net/domain/named.root Restart Unbound:\nsudo systemctl restart unbound Step 4: Integrate Pi-hole with Unbound Set Pi-hole to use Unbound as its upstream DNS:\nOpen the Pi-hole admin interface at http://\u0026lt;pi-hole_ip_address\u0026gt;/admin. Navigate to Settings \u0026gt; DNS. Add 127.0.0.1#5335 as a custom upstream DNS server. Disable other upstream DNS servers to ensure queries are routed through Unbound.\nStep 5: Test the Setup Verify that Unbound is resolving DNS queries:\ndig google.com @127.0.0.1 -p 5335 The response should include SERVER: 127.0.0.1#5335.\nCheck DNS queries in the Pi-hole dashboard:\nOpen the Pi-hole web interface and confirm that queries are passing through Unbound.\nStep 6: Monitor and Maintain Monitor DNS performance in Pi-hole logs:\npihole -t Update the root hints file periodically:\nsudo curl -o /var/lib/unbound/root.hints https://www.internic.net/domain/named.root Keep Pi-hole and Unbound updated:\nsudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y FAQs Q: Why use Unbound with Pi-hole?\nA: Unbound acts as a recursive DNS resolver, improving privacy by bypassing third-party DNS providers and resolving queries directly from authoritative servers.\nQ: Can I use Unbound with other DNS services?\nA: Yes, but the primary advantage is pairing it with Pi-hole for enhanced privacy and ad blocking.\nQ: How do I troubleshoot Unbound issues?\nA: Check the Unbound logs:\nbash\rsudo journalctl -u unbound\rQ: Does this setup work with IPv6?\nA: Yes, ensure Unbound is configured to handle both IPv4 and IPv6 queries.\nQ: How can I check DNS query performance?\nA: Use tools like dig or monitor the query log in the Pi-hole admin interface.\nQ: Can I run this on a Raspberry Pi Zero?\nA: Yes, but performance may be limited for larger networks due to the Pi Zero’s hardware constraints.\nQ: What happens if Unbound fails?\nA: DNS resolution will stop unless you configure fallback DNS servers in Pi-hole.\nBy combining Pi-hole and Unbound, you can enhance DNS privacy and improve network performance in your homelab. Enjoy a more secure and efficient browsing experience!\n","permalink":"https://utechjapan.net/post/running-a-pi-hole-and-unbound-setup-for-enhanced-dns-privacy/","summary":"\u003ch2 id=\"what-youll-need\"\u003eWhat You’ll Need\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eA Raspberry Pi or server running Pi-hole.\u003c/li\u003e\n\u003cli\u003eBasic knowledge of Linux commands.\u003c/li\u003e\n\u003cli\u003eAn active internet connection.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"step-1-update-your-pi-hole-installation\"\u003eStep 1: Update Your Pi-hole Installation\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eLog into your Pi-hole server via SSH\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003essh pi@\u0026lt;pi-hole_ip_address\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eUpdate Pi-hole to the latest version\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epihole -up\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eEnsure the system is up to date\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo apt update \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e sudo apt upgrade -y\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"step-2-install-unbound\"\u003eStep 2: Install Unbound\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eInstall Unbound on your Pi-hole server\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo apt install unbound -y\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eVerify the installation\u003c/strong\u003e:\u003c/p\u003e","title":"Running a Pi-hole and Unbound Setup for Enhanced DNS Privacy"},{"content":"Docker containers are lightweight and portable, making them a great tool for running applications in your homelab. A Raspberry Pi is an ideal low-cost, low-power device for hosting Docker containers. This guide will walk you through setting up Docker on a Raspberry Pi and deploying your first container.\nWhat You’ll Need A Raspberry Pi (recommended: Raspberry Pi 3, 4, or newer). MicroSD card with Raspberry Pi OS Lite installed. A stable internet connection. Basic knowledge of Linux commands. Step 1: Update and Prepare Your Raspberry Pi Log into your Raspberry Pi via SSH: ssh pi@\u0026lt;raspberry_pi_ip_address\u0026gt; Update and upgrade the system packages: sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y Install prerequisite packages: sudo apt install -y apt-transport-https ca-certificates curl software-properties-common Step 2: Install Docker on the Raspberry Pi Download the official Docker installation script: curl -fsSL https://get.docker.com -o get-docker.sh Run the installation script: sudo sh get-docker.sh Add your user to the docker group (replace pi with your username if different): sudo usermod -aG docker pi Log out and back in to apply the changes.\nVerify the Docker installation: docker --version Step 3: Enable Docker to Start on Boot Enable the Docker service: sudo systemctl enable docker Check that Docker is running: sudo systemctl status docker Step 4: Deploy Your First Docker Container Pull an official Docker image (e.g., Nginx): docker pull nginx Run a container using the image: docker run -d -p 8080:80 --name webserver nginx Open a web browser and navigate to http://\u0026lt;raspberry_pi_ip_address\u0026gt;:8080. You should see the default Nginx page. Step 5: Manage Docker Containers List running containers: docker ps Stop a container: docker stop webserver Restart a container: docker start webserver Remove a container: docker rm webserver Step 6: Use Docker Compose (Optional) Docker Compose is a tool for managing multi-container applications.\nInstall Docker Compose: sudo apt install docker-compose Create a docker-compose.yml file:\nExample: yaml\rversion: \u0026#34;3.9\u0026#34;\rservices:\rapp:\rimage: nginx\rports:\r- \u0026#34;8080:80\u0026#34; Run the application: docker-compose up -d Stop the application: docker-compose down FAQs Q: Can I use Docker on older Raspberry Pi models?\nA: Yes, but performance may be limited on older models like Raspberry Pi 1 or Zero due to resource constraints.\nQ: Do I need a 64-bit OS to run Docker on a Raspberry Pi?\nA: While Docker runs on 32-bit systems, using a 64-bit OS is recommended for better compatibility and performance.\nQ: How do I update Docker?\nA: Use the following commands to update Docker:\nsudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y Q: Can I run multiple containers at once?\nA: Yes, Docker is designed for running multiple containers simultaneously. Use docker-compose to manage multi-container applications easily.\nQ: What happens if my Raspberry Pi reboots?\nA: Containers will not start automatically unless you specify the --restart flag when running a container:\ndocker run -d --restart unless-stopped \u0026lt;image\u0026gt; Q: How do I clean up unused Docker resources?\nA: Use the following command to remove unused images, containers, and volumes:\ndocker system prune -a Q: Can I access containers from outside my network?\nA:Yes, configure port forwarding on your router to expose the container\u0026rsquo;s ports to the internet. Be cautious and secure your setup.\nRunning Docker on a Raspberry Pi is a fantastic way to explore containerized applications in your homelab. From web servers to databases, the possibilities are endless. Happy containerizing!\n","permalink":"https://utechjapan.net/post/running-docker-containers-on-a-raspberry-pi-a-step-by-step-guide/","summary":"\u003cp\u003eDocker containers are lightweight and portable, making them a great tool for running applications in your homelab. A Raspberry Pi is an ideal low-cost, low-power device for hosting Docker containers. This guide will walk you through setting up Docker on a Raspberry Pi and deploying your first container.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"what-youll-need\"\u003eWhat You’ll Need\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eA Raspberry Pi (recommended: Raspberry Pi 3, 4, or newer).\u003c/li\u003e\n\u003cli\u003eMicroSD card with Raspberry Pi OS Lite installed.\u003c/li\u003e\n\u003cli\u003eA stable internet connection.\u003c/li\u003e\n\u003cli\u003eBasic knowledge of Linux commands.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"step-1-update-and-prepare-your-raspberry-pi\"\u003eStep 1: Update and Prepare Your Raspberry Pi\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eLog into your Raspberry Pi via SSH\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003essh pi@\u0026lt;raspberry_pi_ip_address\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eUpdate and upgrade the system packages\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eInstall prerequisite packages\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo apt install -y apt-transport-https ca-certificates curl software-properties-common\n\u003c/code\u003e\u003c/pre\u003e\u003chr\u003e\n\u003ch2 id=\"step-2-install-docker-on-the-raspberry-pi\"\u003eStep 2: Install Docker on the Raspberry Pi\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eDownload the official Docker installation script\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecurl -fsSL https://get.docker.com -o get-docker.sh\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eRun the installation script\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo sh get-docker.sh\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eAdd your user to the \u003ccode\u003edocker\u003c/code\u003e group\u003c/strong\u003e (replace \u003ccode\u003epi\u003c/code\u003e with your username if different):\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo usermod -aG docker pi\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLog out and back in to apply the changes.\u003c/p\u003e","title":"Running Docker Containers on a Raspberry Pi: A Step-by-Step Guide"},{"content":"Running a homelab introduces exciting possibilities, but it also opens potential security vulnerabilities. Securing your homelab with a firewall and VPN ensures safe access to your systems and protects your network from unauthorized intrusions. In this guide, we’ll explore best practices for setting up a secure firewall and VPN for your homelab.\nWhat You’ll Need A dedicated router or a device to run firewall software (e.g., pfSense, OPNSense). VPN software or hardware (e.g., WireGuard, OpenVPN). Basic networking knowledge for configuring IPs and port forwarding. Step 1: Set Up a Dedicated Firewall Option 1: Install pfSense Download pfSense: Get the latest ISO from the pfSense download page. Create a Bootable USB Drive: Use Rufus or similar tools to flash the ISO onto a USB drive. Install pfSense on Your Firewall Device: Boot from the USB drive and follow the installation wizard. Initial Configuration: Access the pfSense web interface at http://192.168.1.1. Configure the WAN (internet) and LAN (internal network) interfaces. Option 2: Install OPNSense OPNSense is a robust alternative to pfSense. The installation steps are nearly identical.\nFirewall Rules Block all inbound traffic by default and allow only necessary ports. Enable logging for critical rules to monitor suspicious activity. Segment your homelab network using VLANs: Assign separate VLANs for different purposes (e.g., IoT, media server, Kubernetes). Use managed switches to configure VLANs effectively. Step 2: Configure VPN for Secure Remote Access Option 1: Install WireGuard Install WireGuard on Your Firewall: sudo apt install wireguard Generate Keys: wg genkey | tee privatekey | wg pubkey \u0026gt; publickey Configure the WireGuard Interface:\nAdd the following configuration to /etc/wireguard/wg0.conf: [Interface] Address = 10.0.0.1/24 PrivateKey = \u0026lt;your_private_key\u0026gt; ListenPort = 51820 Start WireGuard: sudo wg-quick up wg0 Option 2: Install OpenVPN Use a script to simplify OpenVPN setup: curl -O https://raw.githubusercontent.com/angristan/openvpn-install/master/openvpn-install.sh chmod +x openvpn-install.sh sudo ./openvpn-install.sh Follow the prompts to configure the VPN. Step 3: Harden Your Network Use Strong Passwords and Keys: Avoid default credentials. Use SSH keys instead of passwords for remote access. Enable Intrusion Detection Systems (IDS/IPS): In pfSense or OPNSense, enable tools like Snort or Suricata. Implement Two-Factor Authentication (2FA): Use 2FA for VPNs and administrative portals wherever possible. Keep Firmware and Software Updated: Regularly check for updates to your firewall and VPN software. Step 4: Monitor Network Traffic Use network monitoring tools like: ntopng: Visualize network usage. NetFlow: Analyze data flows for anomalies. Set up alerts for suspicious activity: Configure pfSense to email logs or integrate with SIEM tools. FAQs Q: Why should I segment my network with VLANs?\nA: VLANs isolate traffic, preventing devices on one VLAN from accessing others. This is especially useful for securing IoT devices or sensitive systems.\nQ: Which is better: WireGuard or OpenVPN?\nA: WireGuard is faster and simpler, but OpenVPN is more mature and widely supported. Choose based on your needs.\nQ: How do I test my VPN setup?\nA: Connect to the VPN from a remote device and verify access to internal resources. Use tools like ping to test connectivity.\nQ: Can I use my existing router as a firewall?\nA: Many consumer routers include basic firewall functionality, but dedicated devices like pfSense offer far more control and features.\nQ: What port should I use for WireGuard?\nA: The default is 51820, but you can change it to avoid common scans.\nQ: What happens if my VPN server goes offline?\nA: You won’t be able to access your homelab remotely. Ensure high uptime with a stable internet connection and a UPS for power backup.\nQ: How can I protect against brute-force attacks?\nA: Use strong passwords, enable 2FA, and monitor login attempts using your firewall’s logs.\nWith a robust firewall and VPN setup, you can ensure your homelab remains secure while enjoying remote access to your systems. Happy homelabbing!\n","permalink":"https://utechjapan.net/post/securing-your-homelab-best-practices-for-firewall-and-vpn-setup/","summary":"\u003cp\u003eRunning a homelab introduces exciting possibilities, but it also opens potential security vulnerabilities. Securing your homelab with a firewall and VPN ensures safe access to your systems and protects your network from unauthorized intrusions. In this guide, we’ll explore best practices for setting up a secure firewall and VPN for your homelab.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"what-youll-need\"\u003eWhat You’ll Need\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eA dedicated router or a device to run firewall software (e.g., pfSense, OPNSense).\u003c/li\u003e\n\u003cli\u003eVPN software or hardware (e.g., WireGuard, OpenVPN).\u003c/li\u003e\n\u003cli\u003eBasic networking knowledge for configuring IPs and port forwarding.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"step-1-set-up-a-dedicated-firewall\"\u003eStep 1: Set Up a Dedicated Firewall\u003c/h2\u003e\n\u003ch3 id=\"option-1-install-pfsense\"\u003e\u003cstrong\u003eOption 1: Install pfSense\u003c/strong\u003e\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eDownload pfSense\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eGet the latest ISO from the \u003ca href=\"https://www.pfsense.org/download/\"\u003epfSense download page\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCreate a Bootable USB Drive\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eUse \u003ca href=\"https://rufus.ie/\"\u003eRufus\u003c/a\u003e or similar tools to flash the ISO onto a USB drive.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eInstall pfSense on Your Firewall Device\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eBoot from the USB drive and follow the installation wizard.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eInitial Configuration\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eAccess the pfSense web interface at \u003ccode\u003ehttp://192.168.1.1\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eConfigure the WAN (internet) and LAN (internal network) interfaces.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"option-2-install-opnsense\"\u003e\u003cstrong\u003eOption 2: Install OPNSense\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eOPNSense is a robust alternative to pfSense. The installation steps are nearly identical.\u003c/p\u003e","title":"Securing Your HomeLab: Best Practices for Firewall and VPN Setup"},{"content":"Self-hosting GitLab in your homelab allows you to manage code repositories, CI/CD pipelines, and collaborative development projects in a secure, private environment. This guide walks you through installing and configuring GitLab on your homelab server.\nWhat You’ll Need A server or virtual machine with at least: 4 GB RAM and 2 CPUs (recommended for smaller deployments). 20 GB of storage (more for large repositories or CI/CD). A Linux-based OS (Ubuntu 20.04 or newer is recommended). A static IP or domain name (for remote access). Step 1: Update and Prepare Your Server Log into your server: ssh user@\u0026lt;server_ip\u0026gt; Update the system packages: sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y Install dependencies: sudo apt install -y curl openssh-server ca-certificates Step 2: Install GitLab Add the GitLab repository: curl -s [https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh](https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh) | sudo bash Install GitLab:\nReplace \u0026lt;your-domain\u0026gt; with your server’s domain or IP: sudo EXTERNAL_URL=\u0026#34;http://\u0026lt;your-domain\u0026gt;\u0026#34; apt install -y gitlab-ee Run the GitLab reconfiguration script: sudo gitlab-ctl reconfigure Step 3: Access the GitLab Web Interface Open your web browser and go to http://\u0026lt;your-domain\u0026gt;. Set a password for the default root user on the first login. Log in using the root username and your new password. Step 4: Configure GitLab Set up email notifications: Edit the /etc/gitlab/gitlab.rb file and configure SMTP settings. Reconfigure GitLab: sudo gitlab-ctl reconfigure Create a new project: Navigate to the Projects tab in the web interface. Click New Project and follow the wizard to create your repository. Step 5: Connect to Your Repository Clone the repository to your local machine: git clone http://\u0026lt;your-domain\u0026gt;/\u0026lt;namespace\u0026gt;/\u0026lt;repository\u0026gt;.git Push your code to the repository: cd \u0026lt;repository\u0026gt; git add . git commit -m \u0026#34;Initial commit\u0026#34; git push origin main Step 6: Enable SSL (Optional) Install Certbot for Let\u0026rsquo;s Encrypt: sudo apt install -y certbot Generate an SSL certificate: sudo certbot certonly --standalone -d \u0026lt;your-domain\u0026gt; Update GitLab configuration:\nEdit /etc/gitlab/gitlab.rb: external_url \u0026#34;https://\u0026lt;your-domain\u0026gt;\u0026#34; nginx[\u0026#39;ssl_certificate\u0026#39;] = \u0026#34;/etc/letsencrypt/live/\u0026lt;your-domain\u0026gt;/fullchain.pem\u0026#34; nginx[\u0026#39;ssl_certificate_key\u0026#39;] = \u0026#34;/etc/letsencrypt/live/\u0026lt;your-domain\u0026gt;/privkey.pem\u0026#34; Reconfigure GitLab: sudo gitlab-ctl reconfigure Step 7: Configure CI/CD Pipelines (Optional) Add a .gitlab-ci.yml file to your repository root: yaml\rstages:\r- build\rbuild-job:\rstage: build\rscript:\r- echo \u0026#34;Hello, World!\u0026#34; Commit and push the file: git add .gitlab-ci.yml\rgit commit -m \u0026#34;Add CI/CD pipeline\u0026#34;\rgit push origin main 2. Check the CI/CD \u0026gt; Pipelines section in the GitLab web interface to monitor the job.: FAQs Q: Is GitLab free to use?\nA: Yes, GitLab offers a free tier with all essential features for self-hosting. Paid tiers include advanced features like enhanced security and analytics.\nQ: Can I run GitLab on a Raspberry Pi?\nA: Yes, but it’s resource-intensive. Consider using lightweight alternatives like Gitea or GitBucket for low-powered devices.\nQ: How do I update GitLab?\nA: Run the following commands to update GitLab:\nsudo apt update\rsudo apt upgrade -y\rsudo gitlab-ctl reconfigure Q: How do I back up GitLab?\nA: Use the built-in backup tool:\nsudo gitlab-backup create Backups are stored in /var/opt/gitlab/backups by default.\nQ: How do I secure my GitLab server?\nA: Enable SSL, configure a firewall to block unused ports, and ensure regular updates.\nQ: Can I access GitLab remotely?\nA: Yes, configure a static IP or domain, and open the necessary ports on your firewall/router.\nQ: What are some GitLab alternatives?\nA: Alternatives include Gitea, GitHub Enterprise Server, and Bitbucket Server.\nSelf-hosting GitLab in your homelab provides full control over your version control system and development workflows. Enjoy exploring its powerful features!\n","permalink":"https://utechjapan.net/post/self-hosting-gitlab-a-guide-to-version-control-in-your-homelab/","summary":"\u003cp\u003eSelf-hosting GitLab in your homelab allows you to manage code repositories, CI/CD pipelines, and collaborative development projects in a secure, private environment. This guide walks you through installing and configuring GitLab on your homelab server.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"what-youll-need\"\u003eWhat You’ll Need\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eA server or virtual machine with at least:\n\u003cul\u003e\n\u003cli\u003e4 GB RAM and 2 CPUs (recommended for smaller deployments).\u003c/li\u003e\n\u003cli\u003e20 GB of storage (more for large repositories or CI/CD).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eA Linux-based OS (Ubuntu 20.04 or newer is recommended).\u003c/li\u003e\n\u003cli\u003eA static IP or domain name (for remote access).\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"step-1-update-and-prepare-your-server\"\u003eStep 1: Update and Prepare Your Server\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eLog into your server\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003essh user@\u0026lt;server_ip\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eUpdate the system packages\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eInstall dependencies\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo apt install -y curl openssh-server ca-certificates\n\u003c/code\u003e\u003c/pre\u003e\u003chr\u003e\n\u003ch2 id=\"step-2-install-gitlab\"\u003eStep 2: Install GitLab\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eAdd the GitLab repository\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecurl -s [https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh](https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh) | sudo bash\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eInstall GitLab\u003c/strong\u003e:\u003cbr\u003e\nReplace \u003ccode\u003e\u0026lt;your-domain\u0026gt;\u003c/code\u003e with your server’s domain or IP:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo EXTERNAL_URL=\u0026#34;http://\u0026lt;your-domain\u0026gt;\u0026#34; apt install -y gitlab-ee\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eRun the GitLab reconfiguration script\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo gitlab-ctl reconfigure\n\u003c/code\u003e\u003c/pre\u003e\u003chr\u003e\n\u003ch2 id=\"step-3-access-the-gitlab-web-interface\"\u003eStep 3: Access the GitLab Web Interface\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eOpen your web browser and go to \u003ccode\u003ehttp://\u0026lt;your-domain\u0026gt;\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eSet a password for the default \u003ccode\u003eroot\u003c/code\u003e user on the first login.\u003c/li\u003e\n\u003cli\u003eLog in using the \u003ccode\u003eroot\u003c/code\u003e username and your new password.\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"step-4-configure-gitlab\"\u003eStep 4: Configure GitLab\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eSet up email notifications\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003eEdit the \u003ccode\u003e/etc/gitlab/gitlab.rb\u003c/code\u003e file and configure SMTP settings.\u003c/li\u003e\n\u003cli\u003eReconfigure GitLab:\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo gitlab-ctl reconfigure\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eCreate a new project\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003eNavigate to the \u003cstrong\u003eProjects\u003c/strong\u003e tab in the web interface.\u003c/li\u003e\n\u003cli\u003eClick \u003cstrong\u003eNew Project\u003c/strong\u003e and follow the wizard to create your repository.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"step-5-connect-to-your-repository\"\u003eStep 5: Connect to Your Repository\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eClone the repository to your local machine\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003egit clone http://\u0026lt;your-domain\u0026gt;/\u0026lt;namespace\u0026gt;/\u0026lt;repository\u0026gt;.git\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003ePush your code to the repository\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecd \u0026lt;repository\u0026gt; git add . git commit -m \u0026#34;Initial commit\u0026#34; git push origin main\n\u003c/code\u003e\u003c/pre\u003e\u003chr\u003e\n\u003ch2 id=\"step-6-enable-ssl-optional\"\u003eStep 6: Enable SSL (Optional)\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eInstall Certbot for Let\u0026rsquo;s Encrypt\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo apt install -y certbot\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eGenerate an SSL certificate\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo certbot certonly --standalone -d \u0026lt;your-domain\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eUpdate GitLab configuration\u003c/strong\u003e:\u003cbr\u003e\nEdit \u003ccode\u003e/etc/gitlab/gitlab.rb\u003c/code\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eexternal_url \u0026#34;https://\u0026lt;your-domain\u0026gt;\u0026#34; nginx[\u0026#39;ssl_certificate\u0026#39;] = \u0026#34;/etc/letsencrypt/live/\u0026lt;your-domain\u0026gt;/fullchain.pem\u0026#34; nginx[\u0026#39;ssl_certificate_key\u0026#39;] = \u0026#34;/etc/letsencrypt/live/\u0026lt;your-domain\u0026gt;/privkey.pem\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"4\"\u003e\n\u003cli\u003e\u003cstrong\u003eReconfigure GitLab\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo gitlab-ctl reconfigure\n\u003c/code\u003e\u003c/pre\u003e\u003chr\u003e\n\u003ch2 id=\"step-7-configure-cicd-pipelines-optional\"\u003eStep 7: Configure CI/CD Pipelines (Optional)\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eAdd a \u003ccode\u003e.gitlab-ci.yml\u003c/code\u003e file to your repository root:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eyaml\r\nstages:\r\n  - build\r\n\r\nbuild-job:\r\n  stage: build\r\n  script:\r\n    - echo \u0026#34;Hello, World!\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"4\"\u003e\n\u003cli\u003e\u003cstrong\u003eCommit and push the file\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003egit add .gitlab-ci.yml\r\ngit commit -m \u0026#34;Add CI/CD pipeline\u0026#34;\r\ngit push origin main\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"5\"\u003e\n\u003cli\u003e\u003cstrong\u003e2. Check the \u003cstrong\u003eCI/CD \u0026gt; Pipelines\u003c/strong\u003e section in the GitLab web interface to monitor the job.\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"faqs\"\u003eFAQs\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eQ: Is GitLab free to use?\u003c/strong\u003e\u003cbr\u003e\nA: Yes, GitLab offers a free tier with all essential features for self-hosting. Paid tiers include advanced features like enhanced security and analytics.\u003c/p\u003e","title":"Self-Hosting GitLab: A Guide to Version Control in Your HomeLab"},{"content":"Kubernetes (K8s) is a powerful container orchestration platform used to manage applications at scale. Building a Kubernetes cluster in your homelab allows you to experiment with cloud-native concepts, deploy containerized applications, and learn skills for production-grade environments. In this guide, we’ll walk through setting up a basic Kubernetes cluster at home.\nWhat You’ll Need At least two devices (can be physical machines, VMs, or Raspberry Pis): One as a control plane (master node). One or more as worker nodes. Linux installed on each device (Ubuntu 20.04 or newer is recommended). A reliable network connection. Basic understanding of Linux commands. Step 1: Prepare the Nodes Install Ubuntu on all devices (or use your preferred Linux distro). Update and upgrade the system on each node: sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y Set static IP addresses for all nodes to ensure stability in the cluster. Configure this via /etc/netplan or your router\u0026rsquo;s DHCP settings. Disable swap on all nodes to meet Kubernetes requirements: sudo swapoff -a To make it permanent, edit /etc/fstab and comment out the swap entry.\n5. Install containerd as the container runtime:\nsudo apt install -y containerd sudo systemctl enable containerd --now Step 2: Install kubeadm, kubectl, and kubelet Add the Kubernetes repository to each node: sudo apt update \u0026amp;\u0026amp; sudo apt install -y apt-transport-https curl curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add - echo \u0026#34;deb https://apt.kubernetes.io/ kubernetes-xenial main\u0026#34; | sudo tee /etc/apt/sources.list.d/kubernetes.list Step 3: Initialize the Control Plane On the control plane node, initialize the cluster: sudo kubeadm init --pod-network-cidr=192.168.0.0/16 Replace --pod-network-cidr if you are using a different network plugin.\n2. Configure kubectl for the current user:\nmkdir -p $HOME/.kube sudo cp /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config Note the join command provided at the end of the initialization process. You’ll use this to add worker nodes. Step 4: Install a Network Plugin Install a network plugin to enable communication between pods. For example, install Calico: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml Step 5: Join Worker Nodes to the Cluster On each worker node, use the join command from Step 3 to add them to the cluster: sudo kubeadm join \u0026lt;control_plane_ip\u0026gt;:6443 --token \u0026lt;token\u0026gt; --discovery-token-ca-cert-hash sha256:\u0026lt;hash\u0026gt; Verify the nodes are connected by running the following on the control plane: kubectl get nodes Step 6: Deploy Your First Application (Optional) Create a deployment: kubectl create deployment nginx --image=nginx Expose the deployment as a service: kubectl expose deployment nginx --type=NodePort --port=80 Access the application by finding the NodePort: kubectl get services Step 7: Monitor and Maintain the Cluster Use kubectl commands to monitor pods and nodes: kubectl get pods -A kubectl get nodes Regularly update Kubernetes tools and node packages. Backup the cluster configuration and workloads using tools like Velero. FAQs Q: Can I run Kubernetes on a single node?\nA: Yes, you can use Minikube or set up a single-node cluster for testing, but it won\u0026rsquo;t replicate a multi-node production environment.\nQ: Which container runtime works best for Kubernetes?\nA: Kubernetes supports several container runtimes like containerd (recommended), CRI-O, and Docker (deprecated since Kubernetes 1.20).\nQ: How do I upgrade Kubernetes versions?\nA: Follow the Kubernetes upgrade guide to update kubeadm, kubelet, and the cluster:\nsudo kubeadm upgrade plan Q: Can I access my Kubernetes dashboard?\nA: Yes, install the Kubernetes dashboard and create an admin token for secure access.\nQ: What happens if a node goes offline?\nA: Pods running on that node will be unavailable unless you configure high availability with multiple replicas.\nQ: How do I reset the cluster if something breaks?\nA: Use the following commands to reset nodes:\nsudo kubeadm reset \u0026amp;\u0026amp; sudo rm -rf $HOME/.kube Q: Is Kubernetes overkill for a homelab?\nA: It depends on your goals. Kubernetes is ideal for learning cloud-native applications and managing complex deployments.\nBy setting up Kubernetes in your homelab, you’ll gain hands-on experience with container orchestration and cloud-native technologies. Enjoy your journey into K8s!\n","permalink":"https://utechjapan.net/post/setting-up-a-kubernetes-k8s-cluster-at-home-for-beginners/","summary":"\u003cp\u003eKubernetes (K8s) is a powerful container orchestration platform used to manage applications at scale. Building a Kubernetes cluster in your homelab allows you to experiment with cloud-native concepts, deploy containerized applications, and learn skills for production-grade environments. In this guide, we’ll walk through setting up a basic Kubernetes cluster at home.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"what-youll-need\"\u003eWhat You’ll Need\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eAt least two devices (can be physical machines, VMs, or Raspberry Pis):\n\u003cul\u003e\n\u003cli\u003eOne as a control plane (master node).\u003c/li\u003e\n\u003cli\u003eOne or more as worker nodes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eLinux installed on each device (Ubuntu 20.04 or newer is recommended).\u003c/li\u003e\n\u003cli\u003eA reliable network connection.\u003c/li\u003e\n\u003cli\u003eBasic understanding of Linux commands.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"step-1-prepare-the-nodes\"\u003eStep 1: Prepare the Nodes\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eInstall Ubuntu\u003c/strong\u003e on all devices (or use your preferred Linux distro).\u003c/li\u003e\n\u003cli\u003eUpdate and upgrade the system on each node:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"3\"\u003e\n\u003cli\u003eSet static IP addresses for all nodes to ensure stability in the cluster. Configure this via \u003ccode\u003e/etc/netplan\u003c/code\u003e or your router\u0026rsquo;s DHCP settings.\u003c/li\u003e\n\u003cli\u003eDisable swap on all nodes to meet Kubernetes requirements:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo swapoff -a\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo make it permanent, edit \u003ccode\u003e/etc/fstab\u003c/code\u003e and comment out the swap entry.\u003cbr\u003e\n5. Install \u003ccode\u003econtainerd\u003c/code\u003e as the container runtime:\u003c/p\u003e","title":"Setting Up a Kubernetes (K8s) Cluster at Home for Beginners"},{"content":"About Me I\u0026rsquo;m Chikara Inohara, a technology enthusiast and innovator based in Japan. With a deep passion for exploring cutting-edge technologies and sharing knowledge, I created UTechLabs as a platform to document my journey and help others navigate the ever-evolving world of technology.\nBackground With years of experience in software development, networking, and system administration, I\u0026rsquo;ve worked on various projects ranging from small business solutions to large-scale enterprise systems. My expertise lies in:\nCloud Computing: AWS, Azure, and GCP DevOps Practices: CI/CD pipelines, automation, and containerization Programming Languages: Python, Go, and JavaScript HomeLab Enthusiast: Building and experimenting with home servers Mission At UTechLabs, my goal is to:\nEducate: Provide tutorials, guides, and insights into the latest technologies. Innovate: Explore new tools and methodologies to solve real-world problems. Collaborate: Engage with the tech community to share knowledge and experiences. Get in Touch I\u0026rsquo;m always excited to connect with others in the tech community. Feel free to reach out or follow me on:\nGitHub LinkedIn Twitter YouTube Thank you for visiting UTechLabs! I hope you find the content helpful and informative. Whether you\u0026rsquo;re setting up your first HomeLab or diving into advanced topics, I\u0026rsquo;m here to share knowledge and learn alongside you.\n","permalink":"https://utechjapan.net/about/","summary":"\u003ch1 id=\"about-me\"\u003eAbout Me\u003c/h1\u003e\n\u003cp\u003eI\u0026rsquo;m \u003cstrong\u003eChikara Inohara\u003c/strong\u003e, a technology enthusiast and innovator based in Japan. With a deep passion for exploring cutting-edge technologies and sharing knowledge, I created \u003cstrong\u003eUTechLabs\u003c/strong\u003e as a platform to document my journey and help others navigate the ever-evolving world of technology.\u003c/p\u003e\n\u003ch2 id=\"background\"\u003eBackground\u003c/h2\u003e\n\u003cp\u003eWith years of experience in software development, networking, and system administration, I\u0026rsquo;ve worked on various projects ranging from small business solutions to large-scale enterprise systems. My expertise lies in:\u003c/p\u003e","title":"About"}]